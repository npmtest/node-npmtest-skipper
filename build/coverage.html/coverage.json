{"/home/travis/build/npmtest/node-npmtest-skipper/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_skipper */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-skipper/lib.npmtest_skipper.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/lib.npmtest_skipper.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":58}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_skipper */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_skipper = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_skipper = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-skipper/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":51}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":65},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-skipper && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_skipper */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_skipper","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_skipper.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_skipper.rollup.js'] =","            local.assetsDict['/assets.npmtest_skipper.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_skipper.__dirname + '/lib.npmtest_skipper.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},"b":{"1":[0,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"toParseHTTPBody","line":25,"loc":{"start":{"line":25,"column":17},"end":{"line":25,"column":51}}},"2":{"name":"_parseHTTPBody","line":46,"loc":{"start":{"line":46,"column":9},"end":{"line":46,"column":49}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":22},"end":{"line":58,"column":37}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":17},"end":{"line":69,"column":28}}},"5":{"name":"(anonymous_5)","line":85,"loc":{"start":{"line":85,"column":15},"end":{"line":85,"column":35}}},"6":{"name":"(anonymous_6)","line":105,"loc":{"start":{"line":105,"column":29},"end":{"line":105,"column":43}}},"7":{"name":"(anonymous_7)","line":110,"loc":{"start":{"line":110,"column":37},"end":{"line":110,"column":51}}},"8":{"name":"(anonymous_8)","line":115,"loc":{"start":{"line":115,"column":38},"end":{"line":115,"column":52}}},"9":{"name":"(anonymous_9)","line":131,"loc":{"start":{"line":131,"column":35},"end":{"line":131,"column":49}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":61}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":40}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"5":{"start":{"line":12,"column":0},"end":{"line":16,"column":1}},"6":{"start":{"line":13,"column":2},"end":{"line":13,"column":75}},"7":{"start":{"line":14,"column":2},"end":{"line":14,"column":75}},"8":{"start":{"line":15,"column":2},"end":{"line":15,"column":45}},"9":{"start":{"line":25,"column":0},"end":{"line":151,"column":2}},"10":{"start":{"line":26,"column":2},"end":{"line":26,"column":26}},"11":{"start":{"line":33,"column":2},"end":{"line":33,"column":102}},"12":{"start":{"line":34,"column":2},"end":{"line":34,"column":74}},"13":{"start":{"line":35,"column":2},"end":{"line":35,"column":65}},"14":{"start":{"line":46,"column":2},"end":{"line":150,"column":4}},"15":{"start":{"line":50,"column":4},"end":{"line":54,"column":5}},"16":{"start":{"line":51,"column":6},"end":{"line":53,"column":71}},"17":{"start":{"line":58,"column":4},"end":{"line":63,"column":6}},"18":{"start":{"line":59,"column":6},"end":{"line":61,"column":7}},"19":{"start":{"line":60,"column":8},"end":{"line":60,"column":62}},"20":{"start":{"line":62,"column":6},"end":{"line":62,"column":23}},"21":{"start":{"line":66,"column":4},"end":{"line":74,"column":5}},"22":{"start":{"line":69,"column":6},"end":{"line":71,"column":8}},"23":{"start":{"line":70,"column":8},"end":{"line":70,"column":99}},"24":{"start":{"line":73,"column":6},"end":{"line":73,"column":20}},"25":{"start":{"line":85,"column":4},"end":{"line":91,"column":6}},"26":{"start":{"line":86,"column":6},"end":{"line":88,"column":9}},"27":{"start":{"line":89,"column":6},"end":{"line":89,"column":49}},"28":{"start":{"line":90,"column":6},"end":{"line":90,"column":26}},"29":{"start":{"line":93,"column":4},"end":{"line":102,"column":5}},"30":{"start":{"line":100,"column":6},"end":{"line":100,"column":20}},"31":{"start":{"line":101,"column":6},"end":{"line":101,"column":20}},"32":{"start":{"line":105,"column":4},"end":{"line":149,"column":7}},"33":{"start":{"line":106,"column":6},"end":{"line":106,"column":39}},"34":{"start":{"line":106,"column":15},"end":{"line":106,"column":39}},"35":{"start":{"line":108,"column":6},"end":{"line":108,"column":54}},"36":{"start":{"line":108,"column":39},"end":{"line":108,"column":53}},"37":{"start":{"line":110,"column":6},"end":{"line":148,"column":9}},"38":{"start":{"line":111,"column":8},"end":{"line":111,"column":41}},"39":{"start":{"line":111,"column":17},"end":{"line":111,"column":41}},"40":{"start":{"line":113,"column":8},"end":{"line":113,"column":73}},"41":{"start":{"line":113,"column":58},"end":{"line":113,"column":72}},"42":{"start":{"line":115,"column":8},"end":{"line":147,"column":11}},"43":{"start":{"line":116,"column":10},"end":{"line":116,"column":43}},"44":{"start":{"line":116,"column":19},"end":{"line":116,"column":43}},"45":{"start":{"line":118,"column":10},"end":{"line":118,"column":59}},"46":{"start":{"line":118,"column":45},"end":{"line":118,"column":59}},"47":{"start":{"line":129,"column":10},"end":{"line":129,"column":62}},"48":{"start":{"line":130,"column":10},"end":{"line":130,"column":59}},"49":{"start":{"line":131,"column":10},"end":{"line":146,"column":13}},"50":{"start":{"line":136,"column":12},"end":{"line":136,"column":60}},"51":{"start":{"line":140,"column":12},"end":{"line":142,"column":13}},"52":{"start":{"line":145,"column":12},"end":{"line":145,"column":19}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":0},"end":{"line":12,"column":0}},{"start":{"line":12,"column":0},"end":{"line":12,"column":0}}]},"2":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":19}},{"start":{"line":26,"column":23},"end":{"line":26,"column":25}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"5":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"6":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":8},"end":{"line":66,"column":42}},{"start":{"line":66,"column":46},"end":{"line":66,"column":84}},{"start":{"line":66,"column":88},"end":{"line":66,"column":123}}]},"7":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":4},"end":{"line":93,"column":4}},{"start":{"line":93,"column":4},"end":{"line":93,"column":4}}]},"8":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":6},"end":{"line":95,"column":51}},{"start":{"line":97,"column":7},"end":{"line":97,"column":42}},{"start":{"line":97,"column":46},"end":{"line":97,"column":83}}]},"9":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":6},"end":{"line":106,"column":6}},{"start":{"line":106,"column":6},"end":{"line":106,"column":6}}]},"10":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":6},"end":{"line":108,"column":6}},{"start":{"line":108,"column":6},"end":{"line":108,"column":6}}]},"11":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":8}},{"start":{"line":111,"column":8},"end":{"line":111,"column":8}}]},"12":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":8}},{"start":{"line":113,"column":8},"end":{"line":113,"column":8}}]},"13":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":10},"end":{"line":116,"column":10}},{"start":{"line":116,"column":10},"end":{"line":116,"column":10}}]},"14":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":10},"end":{"line":118,"column":10}},{"start":{"line":118,"column":10},"end":{"line":118,"column":10}}]},"15":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":12},"end":{"line":140,"column":12}},{"start":{"line":140,"column":12},"end":{"line":140,"column":12}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var toParseMultipartHTTPRequest = require('./lib/multipart');","var bodyParser = require('body-parser');","var Upstream = require('./standalone/Upstream');","","// Double-check that a valid Node version with support for streams2","// is being used","if (!require('semver').satisfies(process.version, '>=0.10.0')) {","  console.error('`skipper` (bodyParser) requires node version >= 0.10.0.');","  console.error('Please upgrade Node at http://nodejs.org/ or with `nvm`');","  throw new Error('Invalid Node.js version');","}","","/**"," * Skipper"," *"," * @param  {Object} options [description]"," * @return {Function}"," */","","module.exports = function toParseHTTPBody(options) {","  options = options || {};","","  // Configure body parser components","","  // For URLEncoded, default the \"extended\" option to true for backwards compatibility,","  // and to avoid a deprecation warning (see https://github.com/expressjs/body-parser#options-3)","  // Also default request limit for JSON and URL-encoded parsers to 1mb for backwards compatibility.","  var URLEncodedBodyParser = bodyParser.urlencoded(_.extend({extended: true, limit: '1mb'}, options));","  var JSONBodyParser = bodyParser.json(_.extend({limit: '1mb'}, options));","  var MultipartBodyParser = toParseMultipartHTTPRequest(options);","","","  /**","   * Connet/Express/Sails-compatible middleware.","   *","   * @param  {Request}   req  [description]","   * @param  {Response}   res  [description]","   * @param  {Function} next [description]","   */","","  return function _parseHTTPBody(req, res, next) {","","    // If there's no `req.is`, bail out early because we won't be able to tell","    // with certainty what the content-type is or isn't.","    if (!req.is) {","      return next(new Error('Consistency violation: `req.is` is not defined.\\n' +","                            'This typically means that you are using an outdated version of Express.\\n'+","                            'Skipper requires Express 3 or above.\\n'));","    }","","    // Use custom body parser error handler if provided, otherwise","    // just forward the error to the next Express error-handling middleware.","    var handleError = function (err) {","      if (options.onBodyParserError) {","        return options.onBodyParserError(err, req, res, next);","      }","      return next(err);","    };","","    // Optimization: skip bodyParser for GET, OPTIONS, or body-less requests.","    if (req.method.toLowerCase() === 'get' || req.method.toLowerCase() === 'options' || req.method.toLowerCase() === 'head') {","","      // But stub out a `req.file()` method with a usage error:","      req.file = function() {","        throw new Error('`req.file()` cannot be used with an HTTP GET, OPTIONS, or HEAD request.');","      };","","      return next();","    }","","    // TODO: Optimization: only run bodyParser if this is a known route","","    // log.verbose('Running request ('+req.method+' ' + req.url + ') through bodyParser...');","","    // Mock up a req.file handler that returns a noop upstream, so that user code","    // can use `req.file` without having to check for it first.  This is useful in cases","    // where there may or may not be file params coming in.  The Multipart parser will","    // replace this with an actual upstream-acquiring function if the request isn't successfully","    // handled by one of the other parsers first.","    req.file = function(fieldName) {","      var noopUpstream = new Upstream({","        noop: true","      });","      noopUpstream.fieldName = 'NOOP_'+fieldName;","      return noopUpstream;","    };","","    if (","      // If we have a content-length header...","      !_.isUndefined(req.headers['content-length']) &&","      // And the content length is declared to be zero...","      (req.headers['content-length'] === 0 || req.headers['content-length'] === '0')) {","      // Then we set the body to any empty object","      // and skip all this body-parsing mishegoss.","      req.body = {};","      return next();","    }","","    // Try to parse a request that has application/json content type","    JSONBodyParser(req, res, function(err) {","      if (err) return handleError(err);","      // If the parser actually ran and did some parsing, then we're done.","      if (req.is('application/json')) {return next();}","      // Otherwise try the URL-encoded parser (application/x-www-form-urlencoded type)","      URLEncodedBodyParser(req, res, function(err) {","        if (err) return handleError(err);","        // If the parser actually ran and did some parsing, then we're done.","        if (req.is('application/x-www-form-urlencoded')) {return next();}","        // Otherwise try the multipart parser","        MultipartBodyParser(req, res, function(err) {","          if (err) return handleError(err);","          // If the parser actually ran and did some parsing, then we're done.","          if (req.is('multipart/form-data')) return next();","","          /**","           * OK, here's how the re-run of the JSON bodyparser works:","           * ========================================================","           * If the original pass of the bodyParser failed to parse anything, rerun it,","           * but with an artificial `application/json` content-type header,","           * forcing it to try and parse the request body as JSON.  This is just in case","           * the user sent a JSON request body, but forgot to set the appropriate header","           * (which is pretty much every time, I think.)","           */","          var backupContentType = req.headers['content-type'];","          req.headers['content-type'] = 'application/json';","          JSONBodyParser(req, res, function(err) {","","            // Revert content-type to what it originally was.","            // This is so we don't inadvertently corrupt `req.headers`--","            // our apps' actions might be looking for 'em.","            req.headers['content-type'] = backupContentType;","","            // If an error occurred in the retry, it's not actually an error","            // (we can't assume EVERY requeset was intended to be JSON)","            if (err) {","              // log.verbose('Attempted to retry bodyParse as JSON.  But no luck.', err);","            }","","            // Proceed, whether or not the body was parsed.","            next();","          });","        });","      });","    });","  };","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"12":1,"13":0,"14":0,"15":0,"25":1,"26":0,"33":0,"34":0,"35":0,"46":0,"50":0,"51":0,"58":0,"59":0,"60":0,"62":0,"66":0,"69":0,"70":0,"73":0,"85":0,"86":0,"89":0,"90":0,"93":0,"100":0,"101":0,"105":0,"106":0,"108":0,"110":0,"111":0,"113":0,"115":0,"116":0,"118":0,"129":0,"130":0,"131":0,"136":0,"140":0,"145":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/multipart.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/multipart.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"toParseMultipartHTTPRequest","line":18,"loc":{"start":{"line":18,"column":17},"end":{"line":18,"column":63}}},"2":{"name":"_parseMultipartHTTPRequest","line":19,"loc":{"start":{"line":19,"column":9},"end":{"line":19,"column":61}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":27},"end":{"line":45,"column":41}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":42}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":33}},"4":{"start":{"line":18,"column":0},"end":{"line":55,"column":2}},"5":{"start":{"line":19,"column":2},"end":{"line":54,"column":4}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":54}},"7":{"start":{"line":30,"column":40},"end":{"line":30,"column":54}},"8":{"start":{"line":34,"column":4},"end":{"line":34,"column":66}},"9":{"start":{"line":37,"column":4},"end":{"line":37,"column":54}},"10":{"start":{"line":44,"column":4},"end":{"line":52,"column":5}},"11":{"start":{"line":45,"column":6},"end":{"line":51,"column":9}},"12":{"start":{"line":46,"column":8},"end":{"line":50,"column":46}},"13":{"start":{"line":47,"column":10},"end":{"line":49,"column":24}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":40}},"15":{"start":{"line":50,"column":15},"end":{"line":50,"column":46}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var log = require('../standalone/logger');","var Parser = require('./Parser');","","","","/**"," * Parse a multipart HTTP request."," *"," * @param  {Object|nil} options"," * @return {Middleware}"," */","","module.exports = function toParseMultipartHTTPRequest(options) {","  return function _parseMultipartHTTPRequest(req, res, next) {","","    //","    // Conventions:","    //  + Any other logic which mutates `req` should go in this file.","    //  + Try not to pass direct access to `req` to other modules (violating this currently)","    //  + Try not to pass direct access to `next` to other modules (violating this currently)","    //","","    // If the content type is NOT explicitly set to \"multipart/form-data\",","    // don't run all this expensive code -- just bail out early.","    if (!req.is('multipart/form-data')) return next();","","    // Namespace a property on `req` and instantiate a Parser","    // to put in there.","    var parser = req._fileparser = new Parser(req, options, next);","","    // Expose `req.file(...)` method","    req.file = _.bind(parser.acquireUpstream, parser);","","","    // If parser emits `warning`, also emit it on `req` so it can be captured","    // by your app.  When NODE_ENV != 'production', if `req._sails` exists, this","    // will attempt to log a message to the console using your configured logger.","    // If this doesn't work, it logs a message.  In production, no warnings are emitted.","    if (process.env.NODE_ENV !== 'production') {","      parser.on('warning', function(msg) {","        if (req._sails) {","          try {","            req._sails.log.verbose(msg);","          } catch (e) {}","        } else log.color('yellow').write(msg);","      });","    }","","  };","};","",""],"l":{"5":1,"6":1,"7":1,"18":1,"19":0,"30":0,"34":0,"37":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/logger.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/logger.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":0,"18":1},"b":{"1":[1,0],"2":[0,1]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"consoleLogger","line":12,"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":59}}},"2":{"name":"colorLogger","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":47}}},"3":{"name":"(anonymous_3)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":25}}},"4":{"name":"(anonymous_4)","line":19,"loc":{"start":{"line":19,"column":58},"end":{"line":19,"column":73}}},"5":{"name":"noOp","line":32,"loc":{"start":{"line":32,"column":11},"end":{"line":32,"column":27}}},"6":{"name":"noOp","line":33,"loc":{"start":{"line":33,"column":17},"end":{"line":33,"column":33}}},"7":{"name":"noOp","line":33,"loc":{"start":{"line":33,"column":50},"end":{"line":33,"column":65}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":99}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":11}},"4":{"start":{"line":10,"column":0},"end":{"line":34,"column":1}},"5":{"start":{"line":11,"column":2},"end":{"line":11,"column":20}},"6":{"start":{"line":12,"column":2},"end":{"line":14,"column":4}},"7":{"start":{"line":13,"column":4},"end":{"line":13,"column":70}},"8":{"start":{"line":15,"column":2},"end":{"line":29,"column":4}},"9":{"start":{"line":16,"column":4},"end":{"line":28,"column":6}},"10":{"start":{"line":18,"column":8},"end":{"line":26,"column":10}},"11":{"start":{"line":20,"column":12},"end":{"line":23,"column":35}},"12":{"start":{"line":21,"column":14},"end":{"line":21,"column":31}},"13":{"start":{"line":23,"column":23},"end":{"line":23,"column":33}},"14":{"start":{"line":24,"column":12},"end":{"line":24,"column":21}},"15":{"start":{"line":32,"column":2},"end":{"line":32,"column":30}},"16":{"start":{"line":33,"column":2},"end":{"line":33,"column":72}},"17":{"start":{"line":33,"column":35},"end":{"line":33,"column":69}},"18":{"start":{"line":36,"column":0},"end":{"line":36,"column":24}}},"branchMap":{"1":{"line":7,"type":"binary-expr","locations":[{"start":{"line":7,"column":30},"end":{"line":7,"column":59}},{"start":{"line":7,"column":63},"end":{"line":7,"column":97}}]},"2":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":0},"end":{"line":10,"column":0}},{"start":{"line":10,"column":0},"end":{"line":10,"column":0}}]}},"code":["var _ = require('lodash');","","// todo rip this out (use the debug module)","","","// (set to `true` to display development-only log messages)","FILE_PARSER_LOGGER_ENABLED = (_.isString(process.env.DEBUG) && process.env.DEBUG.match('skipper'));","","var logger;","if (global.FILE_PARSER_LOGGER_ENABLED) {","  require('colors');","  logger = function consoleLogger( /* arg0, ..., argN */ ) {","    console.log.apply(console, Array.prototype.slice.call(arguments));","  };","  logger.color = function colorLogger( color ) {","    return {","      write: function () {","        console.log.apply(console,","          _.reduce(Array.prototype.slice.call(arguments), function (m,v) {","            try {","              m.push(v[color]);","            }","            catch(e) { m.push(v); }","            return m;","          }, [])","        );","      }","    };","  };","}","else {","  logger = function noOp() {};","  logger.color = function noOp() { return {write: function noOp(){}}; };","}","","module.exports = logger;",""],"l":{"1":1,"7":1,"9":1,"10":1,"11":0,"12":0,"13":0,"15":0,"16":0,"18":0,"20":0,"21":0,"23":0,"24":0,"32":1,"33":1,"36":1}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":37}}},"branchMap":{},"code":["module.exports = require('./Parser');",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/Parser.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/Parser.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"Parser","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":50}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"4":{"start":{"line":21,"column":0},"end":{"line":37,"column":1}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":17}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":19}},"7":{"start":{"line":25,"column":2},"end":{"line":25,"column":56}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":22}},"9":{"start":{"line":34,"column":2},"end":{"line":34,"column":37}},"10":{"start":{"line":36,"column":2},"end":{"line":36,"column":18}},"11":{"start":{"line":38,"column":0},"end":{"line":38,"column":36}},"12":{"start":{"line":45,"column":0},"end":{"line":45,"column":60}},"13":{"start":{"line":47,"column":0},"end":{"line":47,"column":56}},"14":{"start":{"line":49,"column":0},"end":{"line":49,"column":66}},"15":{"start":{"line":51,"column":0},"end":{"line":51,"column":74}},"16":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}}},"branchMap":{},"code":["/**"," * Module dependencies"," */","","var util = require('util');","var EventEmitter = require('events').EventEmitter;","var applyDefaultOptions = require('./defaults');","","","","/**"," * Parser"," *"," * constructor"," *"," * @param {[type]} req     [description]"," * @param {[type]} options [description]"," * @param {Function} next"," */","","function Parser(req, options, next) {","","  this.req = req;","  this.next = next;","  this.options = options = applyDefaultOptions(options);","","  // Tracks Upstreams generated during this request.","  this.upstreams = [];","","  // Tracks text params which have been received during this request.","  // They may or may not have finished yet, as indicated by the `done`","  // key on each object.  `stream` is the raw partstream from the multipart","  // HTTP request.","  this.textParams = [ /* {}, {} */ ];","","  this.parseReq();","}","util.inherits(Parser, EventEmitter);","","","/**"," * Parse an incoming multipart request."," */","","Parser.prototype.parseReq = require('./prototype.parseReq');","","Parser.prototype.onFile = require('./prototype.onFile');","","Parser.prototype.onTextParam = require('./prototype.onTextParam');","","Parser.prototype.acquireUpstream = require('./prototype.acquireUpstream');","","","module.exports = Parser;",""],"l":{"5":1,"6":1,"7":1,"21":1,"23":0,"24":0,"25":0,"28":0,"34":0,"36":0,"38":1,"45":1,"47":1,"49":1,"51":1,"54":1}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/defaults.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/defaults.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":17},"end":{"line":9,"column":35}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":9,"column":0},"end":{"line":37,"column":2}},"3":{"start":{"line":12,"column":2},"end":{"line":12,"column":26}},"4":{"start":{"line":13,"column":2},"end":{"line":34,"column":5}},"5":{"start":{"line":36,"column":2},"end":{"line":36,"column":17}}},"branchMap":{"1":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":19}},{"start":{"line":12,"column":23},"end":{"line":12,"column":25}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","","","","module.exports = function(options) {","","  // Apply defaults","  options = options || {};","  _.defaults(options, {","","    // maxWaitTime is the maximum # of ms to wait for the first file","    // if the request finishes before this number of ms (i.e. the form emits \"close\")","    // then there is no problem.  Otherwise, a fatal ETIMEOUT error will fire.","    maxTimeToWaitForFirstFile: 10000,","","    // maxBufferTime is the maximum # of ms to wait for an UploadStream","    // to be plugged in to something (i.e. buffering the incoming bytes)","    // before dropping it.","    // (this can probably be replaced with `highWaterMark` and `lowWaterMark`","    // in streams2)","    maxTimeToBuffer: 4500,","","    // maxWaitTimeBeforePassingControlToApp is the maximum # of ms to wait for","    // either a) a file to be encountered or b) the entire request body to be parsed,","    // before turning control back over to the caller (e.g. a Sails controller).","    // For SSL servers, it may be necessary to increase this value","    // (see https://github.com/balderdashy/skipper/issues/71#issuecomment-217556631)","    maxWaitTimeBeforePassingControlToApp: 500","","  });","","  return options;","};",""],"l":{"5":1,"9":1,"12":0,"13":0,"36":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/prototype.parseReq.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/prototype.parseReq.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"fnMap":{"1":{"name":"parseReq","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":37}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":19},"end":{"line":28,"column":33}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":27},"end":{"line":33,"column":40}}},"4":{"name":"(anonymous_4)","line":55,"loc":{"start":{"line":55,"column":25},"end":{"line":55,"column":40}}},"5":{"name":"(anonymous_5)","line":59,"loc":{"start":{"line":59,"column":21},"end":{"line":59,"column":34}}},"6":{"name":"(anonymous_6)","line":77,"loc":{"start":{"line":77,"column":19},"end":{"line":77,"column":30}}},"7":{"name":"(anonymous_7)","line":87,"loc":{"start":{"line":87,"column":27},"end":{"line":87,"column":40}}},"8":{"name":"requestBodyCompletelyParsed","line":108,"loc":{"start":{"line":108,"column":6},"end":{"line":108,"column":49}}},"9":{"name":"(anonymous_9)","line":109,"loc":{"start":{"line":109,"column":27},"end":{"line":109,"column":38}}},"10":{"name":"receivedFirstFileOfRequest","line":120,"loc":{"start":{"line":120,"column":6},"end":{"line":120,"column":48}}},"11":{"name":"(anonymous_11)","line":121,"loc":{"start":{"line":121,"column":31},"end":{"line":121,"column":42}}},"12":{"name":"impatient","line":134,"loc":{"start":{"line":134,"column":6},"end":{"line":134,"column":31}}},"13":{"name":"(anonymous_13)","line":139,"loc":{"start":{"line":139,"column":27},"end":{"line":139,"column":38}}},"14":{"name":"iterator","line":149,"loc":{"start":{"line":149,"column":4},"end":{"line":149,"column":35}}},"15":{"name":"finally_waitForTextParams","line":162,"loc":{"start":{"line":162,"column":4},"end":{"line":162,"column":41}}},"16":{"name":"setTimer","line":175,"loc":{"start":{"line":175,"column":8},"end":{"line":175,"column":30}}},"17":{"name":"checkIfAllDetectedTextParamsAreDone","line":197,"loc":{"start":{"line":197,"column":8},"end":{"line":197,"column":55}}},"18":{"name":"passControlToApp","line":202,"loc":{"start":{"line":202,"column":8},"end":{"line":202,"column":39}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":38}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":45}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":40}},"7":{"start":{"line":17,"column":0},"end":{"line":222,"column":2}},"8":{"start":{"line":18,"column":2},"end":{"line":18,"column":18}},"9":{"start":{"line":22,"column":2},"end":{"line":22,"column":36}},"10":{"start":{"line":28,"column":2},"end":{"line":48,"column":5}},"11":{"start":{"line":30,"column":4},"end":{"line":30,"column":48}},"12":{"start":{"line":33,"column":4},"end":{"line":35,"column":7}},"13":{"start":{"line":34,"column":6},"end":{"line":34,"column":33}},"14":{"start":{"line":38,"column":4},"end":{"line":38,"column":38}},"15":{"start":{"line":55,"column":2},"end":{"line":71,"column":12}},"16":{"start":{"line":59,"column":4},"end":{"line":61,"column":7}},"17":{"start":{"line":60,"column":6},"end":{"line":60,"column":136}},"18":{"start":{"line":64,"column":4},"end":{"line":67,"column":5}},"19":{"start":{"line":65,"column":6},"end":{"line":65,"column":29}},"20":{"start":{"line":66,"column":6},"end":{"line":66,"column":13}},"21":{"start":{"line":70,"column":4},"end":{"line":70,"column":22}},"22":{"start":{"line":77,"column":2},"end":{"line":94,"column":5}},"23":{"start":{"line":78,"column":4},"end":{"line":78,"column":54}},"24":{"start":{"line":79,"column":4},"end":{"line":79,"column":37}},"25":{"start":{"line":83,"column":4},"end":{"line":83,"column":23}},"26":{"start":{"line":87,"column":4},"end":{"line":89,"column":7}},"27":{"start":{"line":88,"column":6},"end":{"line":88,"column":23}},"28":{"start":{"line":102,"column":2},"end":{"line":102,"column":12}},"29":{"start":{"line":103,"column":2},"end":{"line":103,"column":17}},"30":{"start":{"line":104,"column":2},"end":{"line":216,"column":7}},"31":{"start":{"line":109,"column":8},"end":{"line":115,"column":11}},"32":{"start":{"line":110,"column":10},"end":{"line":113,"column":11}},"33":{"start":{"line":111,"column":12},"end":{"line":111,"column":137}},"34":{"start":{"line":112,"column":12},"end":{"line":112,"column":55}},"35":{"start":{"line":114,"column":10},"end":{"line":114,"column":21}},"36":{"start":{"line":121,"column":8},"end":{"line":127,"column":11}},"37":{"start":{"line":122,"column":10},"end":{"line":125,"column":11}},"38":{"start":{"line":123,"column":12},"end":{"line":123,"column":75}},"39":{"start":{"line":124,"column":12},"end":{"line":124,"column":54}},"40":{"start":{"line":126,"column":10},"end":{"line":126,"column":21}},"41":{"start":{"line":139,"column":8},"end":{"line":145,"column":62}},"42":{"start":{"line":140,"column":10},"end":{"line":143,"column":11}},"43":{"start":{"line":141,"column":12},"end":{"line":141,"column":113}},"44":{"start":{"line":142,"column":12},"end":{"line":142,"column":37}},"45":{"start":{"line":144,"column":10},"end":{"line":144,"column":21}},"46":{"start":{"line":151,"column":6},"end":{"line":151,"column":18}},"47":{"start":{"line":165,"column":6},"end":{"line":165,"column":43}},"48":{"start":{"line":168,"column":6},"end":{"line":168,"column":26}},"49":{"start":{"line":172,"column":6},"end":{"line":172,"column":17}},"50":{"start":{"line":173,"column":6},"end":{"line":173,"column":23}},"51":{"start":{"line":174,"column":6},"end":{"line":214,"column":8}},"52":{"start":{"line":182,"column":10},"end":{"line":182,"column":21}},"53":{"start":{"line":183,"column":10},"end":{"line":188,"column":11}},"54":{"start":{"line":184,"column":12},"end":{"line":187,"column":15}},"55":{"start":{"line":190,"column":10},"end":{"line":190,"column":29}},"56":{"start":{"line":194,"column":10},"end":{"line":194,"column":38}},"57":{"start":{"line":198,"column":10},"end":{"line":200,"column":13}},"58":{"start":{"line":205,"column":10},"end":{"line":205,"column":41}},"59":{"start":{"line":205,"column":19},"end":{"line":205,"column":41}},"60":{"start":{"line":208,"column":10},"end":{"line":212,"column":11}},"61":{"start":{"line":209,"column":12},"end":{"line":209,"column":53}},"62":{"start":{"line":210,"column":12},"end":{"line":210,"column":47}},"63":{"start":{"line":211,"column":12},"end":{"line":211,"column":24}},"64":{"start":{"line":221,"column":2},"end":{"line":221,"column":23}}},"branchMap":{"1":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":28},"end":{"line":38,"column":31}},{"start":{"line":38,"column":33},"end":{"line":38,"column":37}}]},"2":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":16},"end":{"line":60,"column":19}},{"start":{"line":60,"column":21},"end":{"line":60,"column":134}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"4":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":10},"end":{"line":110,"column":10}},{"start":{"line":110,"column":10},"end":{"line":110,"column":10}}]},"5":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":10},"end":{"line":122,"column":10}},{"start":{"line":122,"column":10},"end":{"line":122,"column":10}}]},"6":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":10},"end":{"line":140,"column":10}},{"start":{"line":140,"column":10},"end":{"line":140,"column":10}}]},"7":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":10},"end":{"line":183,"column":10}},{"start":{"line":183,"column":10},"end":{"line":183,"column":10}}]},"8":{"line":194,"type":"cond-expr","locations":[{"start":{"line":194,"column":26},"end":{"line":194,"column":32}},{"start":{"line":194,"column":35},"end":{"line":194,"column":37}}]},"9":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":10},"end":{"line":205,"column":10}},{"start":{"line":205,"column":10},"end":{"line":205,"column":10}}]},"10":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":10},"end":{"line":208,"column":10}},{"start":{"line":208,"column":10},"end":{"line":208,"column":10}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var async = require('async');","var Form = require('multiparty').Form;","var log = require('../../standalone/logger');","var STRINGFILE = require('../../stringfile');","var debug = require('debug')('skipper');","","","/**"," * Begin parsing an incoming HTTP request (`this.req`)."," */","","module.exports = function parseReq() {","  var self = this;","","","  // Save reference to `form` instance.","  var form = this.form = new Form();","","","","  // Only one 'error' event should ever be emitted, and if an 'error' event","  // is emitted, then 'close' should NOT be emitted.","  form.on('error', function(err) {","","    debug('multiparty form emitted error:',err);","","    // Emits error on any already-live Upstreams in this request.","    _.each(self.upstreams, function(up) {","      up.fatalIncomingError(err);","    });","","    // Flag Parser instance with an error","    self._multipartyError = err||true;","","    // // Stop accepting form stuff.","    // // (no more new incoming files/textparams)","    // self.closed = true;","","    // // // Informs all Upstreams in this request","    // // // that no more files will be sent.","    // // _(self.upstreams).each(function(up) {","    // //   up.noMoreFiles();","  });","","","  /**","   * Receive/handle a new `part` stream from a field in the multipart upload.","   * @param  {stream.Readable} part","   */","  form.on('part', _.bind(function(part) {","","    // In multiparty 4.x, parts can emit errors.","    // So if that happens, we take that error and emit it on the form itself.","    part.on('error', function(err){","      form.emit(err||new Error('Multiparty part stream emitted an unexpected error, but no other information about it was available.'));","    });","","    // Take care of text parameters (i.e. non-files)","    if (!part.filename) {","      this.onTextParam(part);","      return;","    }","","    // Custom handler for fields w/ files","    this.onFile(part);","  }, this));","","","","  // Emitted after all parts have been parsed and emitted. Not emitted if an","  // `error` event is emitted.","  form.on('close', function() {","    log((STRINGFILE.get('parser.form.onClose')).grey);","    debug('multiparty form closed.');","","    // Flag this request as closed","    // (no more new incoming files/textparams)","    self.closed = true;","","    // Informs all Upstreams in this request","    // that no more files will be sent.","    _.each(self.upstreams, function(up) {","      up.noMoreFiles();","    });","","    // Uncomment this (and comment out the `noMoreFiles` business above)","    // to simulate an error for testing purposes:","    // up.fatalIncomingError('whee');","  });","","","","  // Set up 3 conditions under which this Parser will pass control","  // to app-level code (i.e. call next())","  // ONLY ONE of the following must be satisfied to continue onward.","  // (careful! no error allowed in callbacks!)","  var timer;","  var whichGuard;","  async.any([","","      // (1)","      // As soon as request body has been completely parsed.","      function requestBodyCompletelyParsed(done) {","        form.once('close', function() {","          if (!whichGuard){","            debug('passed control to app because the request \"form\" closed (there probably weren\\'t any file uploads on this upstream)');","            whichGuard = 'requestBodyCompletelyParsed';","          }","          done(true);","        });","      },","","      // (2)","      // As soon as at least one file is received on any Upstream.","      function receivedFirstFileOfRequest(done) {","        self.once('firstFile', function() {","          if (!whichGuard){","            debug('passed control to app because first file was received');","            whichGuard = 'receivedFirstFileOfRequest';","          }","          done(true);","        });","      },","","      // (3)","      // If no files have been received by the time","      // `maxWaitTimeBeforePassingControlToApp`ms have elapsed,","      // go ahead and proceed.","      function impatient(done) {","        // Note that this is different than \"maxTimeToWaitForFirstFile\" and \"maxTimeToBuffer\"-","        // rather, this is just the max number of ms that Skipper will wait before passing control","        // from the body parser (i.e. calling next()).","        //","        timer = setTimeout(function() {","          if (!whichGuard){","            debug('passed control to app because %s elapsed', self.options.maxWaitTimeBeforePassingControlToApp);","            whichGuard = 'impatient';","          }","          done(true);","        }, self.options.maxWaitTimeBeforePassingControlToApp);","      }","","    ],","    function iterator(guard, done) {","      // `guard` is one of the three functions above","      guard(done);","    },","","    // ****************************************************************","    // Important:  Before moving on, there is one last consideration:","    //","    // We must also wait until all the chunks for every textparam","    // detected before the first file has been received?","    // This is mostly relevant for files which are extremely small","    // compared to their preceding text parameters.","    //","    function finally_waitForTextParams() {","      // Careful: No error argument allowed in this callback!","","      debug('waiting for any text params');","","      // Make sure the `impatient` timeout fires no more than once","      clearTimeout(timer);","","      // Take a look at all currently known text params for this Upstream,","      // then wait until all of them have been read.","      var ms = 5;","      var numTries = 0;","      async.doUntil(","        function setTimer(cb) {","","","          // Catch-all timeout, just in case something goes awry.","          // Should never happen, but a good failsafe to prevent holding on to","          // control forever.  It this timeout was to fire, we should error out and","          // cancel things.","          numTries++;","          if (numTries > 10) {","            return cb(new Error(","              'EUNFNTEX: Timed out waiting for known text parameters to finish ' +","              'streaming their bytes into the server.'","            ));","          }","","          setTimeout(cb, ms);","","          // Exponential backoff","          // (multiply ms by 2 each time, up to 500)","          ms = ms < 500 ? ms * 2 : ms;","","        },","        function checkIfAllDetectedTextParamsAreDone() {","          return _(self.textParams).all({","            done: true","          });","        },","        function passControlToApp(err) {","","          // If an error occurs, run the app's error handler.","          if (err) return self.next(err);","","          // At last, pass control to the app.","          if (!self._hasPassedControlToApp) {","            debug('Passing control to app...'.green);","            self._hasPassedControlToApp = true;","            self.next();","          }","        }","      );","","    });","","","","  // Lastly, start parsing the incoming multipart upload request.","  form.parse(this.req);","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"17":1,"18":0,"22":0,"28":0,"30":0,"33":0,"34":0,"38":0,"55":0,"59":0,"60":0,"64":0,"65":0,"66":0,"70":0,"77":0,"78":0,"79":0,"83":0,"87":0,"88":0,"102":0,"103":0,"104":0,"109":0,"110":0,"111":0,"112":0,"114":0,"121":0,"122":0,"123":0,"124":0,"126":0,"139":0,"140":0,"141":0,"142":0,"144":0,"151":0,"165":0,"168":0,"172":0,"173":0,"174":0,"182":0,"183":0,"184":0,"190":0,"194":0,"198":0,"205":0,"208":0,"209":0,"210":0,"211":0,"221":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/stringfile.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/stringfile.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":33,"loc":{"start":{"line":33,"column":6},"end":{"line":33,"column":31}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":6,"column":26}},"2":{"start":{"line":11,"column":0},"end":{"line":29,"column":2}},"3":{"start":{"line":32,"column":0},"end":{"line":37,"column":2}},"4":{"start":{"line":34,"column":2},"end":{"line":34,"column":43}},"5":{"start":{"line":35,"column":2},"end":{"line":35,"column":79}}},"branchMap":{"1":{"line":34,"type":"cond-expr","locations":[{"start":{"line":34,"column":33},"end":{"line":34,"column":37}},{"start":{"line":34,"column":40},"end":{"line":34,"column":42}}]},"2":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":10},"end":{"line":34,"column":14}},{"start":{"line":34,"column":18},"end":{"line":34,"column":29}}]}},"code":["/**"," * Module dependencies"," */","","var deep = require('dot-access')","\t, util = require('util');","","","","","var STRINGFILE = {","\t","\twarning: {","\t\t","\t\tparamArrivedTooLate:","\t\t'Unable to expose body parameter `%s` in streaming upload!\\n'+","\t\t'Client tried to send a text parameter (%s) ' +","\t\t'after one or more files had already been sent.\\n'+","\t\t'Make sure you always send text params first, then your files.\\n'+","\t\t'(In an HTML form, it\\'s as easy as making sure your text inputs are listed before your file inputs.'","","\t},","","\tparser: {","\t\tform: {","\t\t\tonClose: 'Form: emitted `close`'","\t\t}","\t}","};","","","module.exports = {","\tget: function (keypath, args) {","\t\targs = (args && args.length) ? args : [];","\t\treturn util.format.apply(util, [deep.get(STRINGFILE, keypath)].concat(args));","\t}","};"],"l":{"5":1,"11":1,"32":1,"34":0,"35":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/prototype.onFile.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/prototype.onFile.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"onFile","line":6,"loc":{"start":{"line":6,"column":17},"end":{"line":6,"column":39}}}},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":21,"column":2}},"2":{"start":{"line":10,"column":2},"end":{"line":10,"column":43}},"3":{"start":{"line":14,"column":2},"end":{"line":17,"column":3}},"4":{"start":{"line":15,"column":4},"end":{"line":15,"column":27}},"5":{"start":{"line":16,"column":4},"end":{"line":16,"column":38}},"6":{"start":{"line":20,"column":2},"end":{"line":20,"column":21}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]}},"code":["/**"," * Receive a file."," * @param  {stream.Readable} part\t\t\t[a file from one of the fields in the multipart upload]"," */","","module.exports = function onFile(part) {","","  // Acquire Upstream for this field","  // (one may or may not already exist)","  var up = this.acquireUpstream(part.name);","","  // First time a file is received, emit an event","  // and set a flag (`this._hasReceivedFirstFile`)","  if (!this.hasReceivedFirstFile) {","    this.emit('firstFile');","    this._hasReceivedFirstFile = true;","  }","","  // Inform Upstream about new file","  up.writeFile(part);","};",""],"l":{"6":1,"10":0,"14":0,"15":0,"16":0,"20":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/prototype.onTextParam.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/prototype.onTextParam.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"onTextParam","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":44}}},"2":{"name":"onBytesAvailable","line":34,"loc":{"start":{"line":34,"column":24},"end":{"line":34,"column":52}}},"3":{"name":"onBytesAvailable","line":55,"loc":{"start":{"line":55,"column":22},"end":{"line":55,"column":50}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":60}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"4":{"start":{"line":17,"column":0},"end":{"line":116,"column":2}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":18}},"6":{"start":{"line":20,"column":2},"end":{"line":20,"column":24}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":17}},"8":{"start":{"line":22,"column":2},"end":{"line":22,"column":54}},"9":{"start":{"line":25,"column":2},"end":{"line":25,"column":44}},"10":{"start":{"line":30,"column":2},"end":{"line":39,"column":3}},"11":{"start":{"line":31,"column":4},"end":{"line":31,"column":88}},"12":{"start":{"line":34,"column":4},"end":{"line":37,"column":7}},"13":{"start":{"line":36,"column":6},"end":{"line":36,"column":50}},"14":{"start":{"line":38,"column":4},"end":{"line":38,"column":11}},"15":{"start":{"line":42,"column":2},"end":{"line":45,"column":4}},"16":{"start":{"line":46,"column":2},"end":{"line":46,"column":42}},"17":{"start":{"line":55,"column":2},"end":{"line":113,"column":5}},"18":{"start":{"line":57,"column":4},"end":{"line":57,"column":20}},"19":{"start":{"line":58,"column":4},"end":{"line":58,"column":14}},"20":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"21":{"start":{"line":60,"column":6},"end":{"line":60,"column":22}},"22":{"start":{"line":64,"column":4},"end":{"line":75,"column":5}},"23":{"start":{"line":67,"column":6},"end":{"line":67,"column":45}},"24":{"start":{"line":68,"column":6},"end":{"line":71,"column":7}},"25":{"start":{"line":69,"column":8},"end":{"line":69,"column":122}},"26":{"start":{"line":70,"column":8},"end":{"line":70,"column":15}},"27":{"start":{"line":72,"column":6},"end":{"line":72,"column":37}},"28":{"start":{"line":73,"column":6},"end":{"line":73,"column":84}},"29":{"start":{"line":74,"column":6},"end":{"line":74,"column":13}},"30":{"start":{"line":77,"column":4},"end":{"line":77,"column":79}},"31":{"start":{"line":93,"column":4},"end":{"line":105,"column":5}},"32":{"start":{"line":95,"column":6},"end":{"line":102,"column":7}},"33":{"start":{"line":96,"column":8},"end":{"line":96,"column":41}},"34":{"start":{"line":98,"column":8},"end":{"line":98,"column":99}},"35":{"start":{"line":99,"column":8},"end":{"line":99,"column":54}},"36":{"start":{"line":100,"column":8},"end":{"line":100,"column":39}},"37":{"start":{"line":101,"column":8},"end":{"line":101,"column":41}},"38":{"start":{"line":104,"column":6},"end":{"line":104,"column":35}},"39":{"start":{"line":111,"column":4},"end":{"line":111,"column":34}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":21},"end":{"line":25,"column":37}},{"start":{"line":25,"column":41},"end":{"line":25,"column":43}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"4":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]},"5":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":4},"end":{"line":93,"column":4}},{"start":{"line":93,"column":4},"end":{"line":93,"column":4}}]},"6":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":6},"end":{"line":95,"column":6}},{"start":{"line":95,"column":6},"end":{"line":95,"column":6}}]}},"code":["/**"," * Module dependencies"," */","","var StringDecoder = require('string_decoder').StringDecoder;","var log = require('../../standalone/logger');","var STRINGFILE = require('../../stringfile.js');","","","","/**"," * Receive a text parameter."," *"," * @param  {stream.Readable} part\t\t\t[a text parameter from one of the fields in the multipart upload]"," */","","module.exports = function onTextParam(part) {","","  var self = this;","  var field = part.name;","  var value = '';","  var decoder = new StringDecoder(this.form.encoding);","","  // Track fields that receive multiple param values","  self.multifields = self.multifields || {};","","  // After control has been relinquished, any textparams received should be ignored","  // since its too late to include them in `req.body` (subsequent app code is already running)","  // So emit a warning.","  if (this._hasPassedControlToApp) {","    this.emit('warning', STRINGFILE.get('warning.paramArrivedTooLate', [field, field]));","    // Redirect the part stream into the data toilet.","    // This ensures that the stream will close properly.","    part.on('readable', function onBytesAvailable() {","      // Read until the buffer is dry.","      while (null !== part.read()) { /* no-op */ }","    });","    return;","  }","","  // Track the newly detected param","  var textParamMetadata = {","    done: false,","    stream: part","  };","  this.textParams.push(textParamMetadata);","","","  // Now receive bytes from the text param:","","  // TODO:","  // Try to use pipe instead, or better yet, defer to the built-in handling","  // w/i formidable/multiparty (as long as we're absolutely certain that doesn't","  // trigger writing .tmp files to disk.)","  part.on('readable', function onBytesAvailable() {","","    var buffer = '';","    var chunk;","    while (null !== (chunk = part.read())) {","      buffer += chunk;","    }","","    // New bytes available for text param:","    if (buffer) {","","      // TODO: make `maxFieldsSize` directly configurable via `options`","      self.form._fieldsSize += buffer.length;","      if (self.form._fieldsSize > self.form.maxFieldsSize) {","        self.form._error(new Error('maxFieldsSize exceeded, received ' + self.form._fieldsSize + ' bytes of field data'));","        return;","      }","      value += decoder.write(buffer);","      log(('Parser: Read a chunk of textparam through field `' + field + '`').grey);","      return;","    }","","    log(('Parser: Done reading textparam through field `' + field + '`').grey);","","","    //","    // Otherwise, if buffer is null, that means we've now received all of the bytes","    // from the textparam.","    //","","    // TODO: emit events instead of mutating `req` directly here.","    // (so we don't have to pass `req` in.)","","    // If `req.body` already contains `field`, and this is the first duplicate value","    // (i.e. the second value to come in for this param) track it as a \"multifield\"","    // and build an array of param values.","    // (We have to do this in case the original value was an array itself- we wouldn't","    // want to push subsequent values onto THAT array, y'know?)","    if (self.req.body[field]) {","","      if (self.multifields[field]) {","        self.req.body[field].push(value);","      } else {","        log('`' + field + '` param already exists in req.body, converting into a \"multifield\"...');","        self.req.body[field] = [self.req.body[field]];","        self.multifields[field] = true;","        self.req.body[field].push(value);","      }","    } else {","      self.req.body[field] = value;","    }","","    // Mark that this textParam is done streaming in data in its","    // `textParamMetadata` object.  This is monitored and used so","    // we know to wait for any known textParams to finish streaming","    // before we pass control to the app.","    textParamMetadata.done = true;","","  });","","","};",""],"l":{"5":1,"6":1,"7":1,"17":1,"19":0,"20":0,"21":0,"22":0,"25":0,"30":0,"31":0,"34":0,"36":0,"38":0,"42":0,"46":0,"55":0,"57":0,"58":0,"59":0,"60":0,"64":0,"67":0,"68":0,"69":0,"70":0,"72":0,"73":0,"74":0,"77":0,"93":0,"95":0,"96":0,"98":0,"99":0,"100":0,"101":0,"104":0,"111":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/prototype.acquireUpstream.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/lib/Parser/prototype.acquireUpstream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"acquireUpstream","line":19,"loc":{"start":{"line":19,"column":17},"end":{"line":19,"column":53}}},"2":{"name":"(anonymous_2)","line":54,"loc":{"start":{"line":54,"column":26},"end":{"line":54,"column":40}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":52}},"4":{"start":{"line":19,"column":0},"end":{"line":76,"column":2}},"5":{"start":{"line":21,"column":2},"end":{"line":23,"column":5}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":44}},"7":{"start":{"line":24,"column":22},"end":{"line":24,"column":44}},"8":{"start":{"line":32,"column":2},"end":{"line":38,"column":3}},"9":{"start":{"line":33,"column":4},"end":{"line":35,"column":7}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":47}},"11":{"start":{"line":37,"column":4},"end":{"line":37,"column":24}},"12":{"start":{"line":42,"column":2},"end":{"line":46,"column":5}},"13":{"start":{"line":47,"column":2},"end":{"line":47,"column":69}},"14":{"start":{"line":48,"column":2},"end":{"line":48,"column":36}},"15":{"start":{"line":49,"column":2},"end":{"line":49,"column":35}},"16":{"start":{"line":53,"column":2},"end":{"line":53,"column":18}},"17":{"start":{"line":54,"column":2},"end":{"line":71,"column":5}},"18":{"start":{"line":57,"column":4},"end":{"line":61,"column":5}},"19":{"start":{"line":58,"column":6},"end":{"line":58,"column":41}},"20":{"start":{"line":59,"column":6},"end":{"line":59,"column":108}},"21":{"start":{"line":60,"column":6},"end":{"line":60,"column":28}},"22":{"start":{"line":68,"column":4},"end":{"line":68,"column":38}},"23":{"start":{"line":69,"column":4},"end":{"line":69,"column":11}},"24":{"start":{"line":74,"column":2},"end":{"line":74,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":24,"column":2}},{"start":{"line":24,"column":2},"end":{"line":24,"column":2}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":17}},{"start":{"line":32,"column":21},"end":{"line":32,"column":42}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var log = require('../../standalone/logger');","var Upstream = require('../../standalone/Upstream');","","","/**"," * Find the Upstream with `fieldName`, or"," * create and save it for the first time if necessary."," * (Takes care of managing the collection of upstreams.)"," *"," * @param  {String} fieldName"," * @return {Upstream}"," */","","module.exports = function acquireUpstream(fieldName) {","","  var existingStream = _.find(this.upstreams, {","    fieldName: fieldName","  });","  if (existingStream) return existingStream;","","","  // If the Parser has `closed` or `_multipartyError` set to true, the request/form","  // has already been completely parsed.  Since we don't recognize","  // the field/Upstream, this must be a call to `req.file('foo')`,","  // where 'foo' is not a file that is going to be coming in.","  // So, we return a Noop stream which will immediately end itself.","  if (this.closed || this._multipartyError) {","    var noopUpstream = new Upstream({","      noop: true","    });","    noopUpstream.fieldName = 'NOOP_'+fieldName;","    return noopUpstream;","  }","","  // Otherwise, we're good.  We should instantiate a new Upstream","  // and assign its `fieldName`,","  var newUpstream = new Upstream({","    // Apply configurable timeout options","    maxTimeToWaitForFirstFile: this.options.maxTimeToWaitForFirstFile,","    maxTimeToBuffer: this.options.maxTimeToBuffer","  });","  log(('Acquiring new Upstream for field `' + fieldName + '`').grey);","  newUpstream.fieldName = fieldName;","  this.upstreams.push(newUpstream);","","","  // If the new Upstream ever emits an 'error' event (\"READ\" error),","  var self = this;","  newUpstream.on('error', function(err) {","","    // terminate the request early (call `next(err)`)","    if (!self._hasPassedControlToApp) {","      self._hasPassedControlToApp = true;","      log('Error occurred in form before control was passed.  Passing control to app error handler...'.red);","      return self.next(err);","    }","","","    // if control has been passed, but nothing has been hooked up yet,","    // we can't really do anything particularly helpful.","    // We'll log a warning.","    // (this is all to keep from throwing and crashing the app)","    self.emit('warning', String(err));","    return;","","  });","","","  return newUpstream;","","};",""],"l":{"5":1,"6":1,"7":1,"19":1,"21":0,"24":0,"32":0,"33":0,"36":0,"37":0,"42":0,"47":0,"48":0,"49":0,"53":0,"54":0,"57":0,"58":0,"59":0,"60":0,"68":0,"69":0,"74":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":39}}},"branchMap":{},"code":["module.exports = require('./Upstream');",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/Upstream.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/Upstream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"Upstream","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":24}}},"2":{"name":"(anonymous_2)","line":59,"loc":{"start":{"line":59,"column":49},"end":{"line":59,"column":60}}},"3":{"name":"(anonymous_3)","line":83,"loc":{"start":{"line":83,"column":49},"end":{"line":83,"column":60}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":26}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":49}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":40}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":34}},"8":{"start":{"line":20,"column":0},"end":{"line":96,"column":1}},"9":{"start":{"line":21,"column":2},"end":{"line":21,"column":18}},"10":{"start":{"line":23,"column":2},"end":{"line":23,"column":20}},"11":{"start":{"line":24,"column":2},"end":{"line":42,"column":5}},"12":{"start":{"line":45,"column":2},"end":{"line":45,"column":25}},"13":{"start":{"line":48,"column":2},"end":{"line":48,"column":36}},"14":{"start":{"line":48,"column":17},"end":{"line":48,"column":36}},"15":{"start":{"line":51,"column":2},"end":{"line":51,"column":19}},"16":{"start":{"line":54,"column":2},"end":{"line":54,"column":21}},"17":{"start":{"line":56,"column":2},"end":{"line":56,"column":28}},"18":{"start":{"line":59,"column":2},"end":{"line":70,"column":37}},"19":{"start":{"line":60,"column":4},"end":{"line":60,"column":170}},"20":{"start":{"line":61,"column":4},"end":{"line":69,"column":5}},"21":{"start":{"line":62,"column":6},"end":{"line":62,"column":26}},"22":{"start":{"line":63,"column":6},"end":{"line":63,"column":26}},"23":{"start":{"line":64,"column":6},"end":{"line":67,"column":85}},"24":{"start":{"line":68,"column":6},"end":{"line":68,"column":33}},"25":{"start":{"line":71,"column":2},"end":{"line":71,"column":93}},"26":{"start":{"line":83,"column":2},"end":{"line":95,"column":27}},"27":{"start":{"line":84,"column":4},"end":{"line":84,"column":205}},"28":{"start":{"line":85,"column":4},"end":{"line":94,"column":5}},"29":{"start":{"line":86,"column":6},"end":{"line":86,"column":26}},"30":{"start":{"line":87,"column":6},"end":{"line":87,"column":28}},"31":{"start":{"line":88,"column":6},"end":{"line":92,"column":83}},"32":{"start":{"line":93,"column":6},"end":{"line":93,"column":33}},"33":{"start":{"line":100,"column":0},"end":{"line":100,"column":56}},"34":{"start":{"line":101,"column":0},"end":{"line":101,"column":54}},"35":{"start":{"line":102,"column":0},"end":{"line":102,"column":58}},"36":{"start":{"line":103,"column":0},"end":{"line":103,"column":74}},"37":{"start":{"line":104,"column":0},"end":{"line":104,"column":64}},"38":{"start":{"line":105,"column":0},"end":{"line":105,"column":82}},"39":{"start":{"line":106,"column":0},"end":{"line":106,"column":68}},"40":{"start":{"line":114,"column":0},"end":{"line":114,"column":26}}},"branchMap":{"1":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":9},"end":{"line":23,"column":13}},{"start":{"line":23,"column":17},"end":{"line":23,"column":19}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]},"3":{"line":60,"type":"cond-expr","locations":[{"start":{"line":60,"column":146},"end":{"line":60,"column":148}},{"start":{"line":60,"column":151},"end":{"line":60,"column":168}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"5":{"line":84,"type":"cond-expr","locations":[{"start":{"line":84,"column":109},"end":{"line":84,"column":152}},{"start":{"line":84,"column":153},"end":{"line":84,"column":184}}]},"6":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":85,"column":4}},{"start":{"line":85,"column":4},"end":{"line":85,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var util = require('util');","var path = require('path');","var Readable = require('stream').Readable;","var _ = require('lodash');","var DefaultFileAdapter = require('skipper-disk');","var debug = require('debug')('skipper');","","","// Extend Readable","util.inherits(Upstream, Readable);","","/**"," * Constructor"," * @param {[type]} opts [description]"," */","function Upstream(opts) {","  var self = this;","","  opts = opts || {};","  _.defaults(opts, {","    // highWaterMark: 0,","    objectMode: true,","","    // The max # of ms this Upstream will wait without receiving a file","    // before getting frustrated and emitting an error.  (This will tell","    // any connected receivers (writestreams) that they ought to just give","    // up themselves.  This, in turn, triggers the callback for `req.file().upload()`","    // (no buffering is happening, so it's ok for this to be longer)","    // This needs to be long enough to allow any policies/middleware to run.","    // Should not need to exceed 500ms in most cases.","    maxTimeToWaitForFirstFile: 10000,","","    // The max # of ms this Upstream will buffer bytes and wait to be plugged","    // into a receiver.  highWaterMark isn't quite enough, since we want to be","    // allow significant buffering in-memory (/utilize back-pressure whenever possible),","    // but we also want to timeout when the really silly sort of requests come in.","    maxTimeToBuffer: 4500","  });","","  // Track fatal errors.","  this._fatalErrors = [];","","  // Allow `noop` to be passed in to force this Upstream to immediately end.","  if (opts.noop) this.isNoop = true;","","  // Keep track of file streams which we've emitted.","  this._files = [];","","  // Keep track of timeout timers.","  this.timeouts = {};","","  Readable.call(this, opts);","","  // Enforce the `maxTimeToWaitForFirstFile` option.","  this.timeouts.untilFirstFileTimer = setTimeout(function() {","    debug('maxTimeToWaitForFirstFile timer fired- as of now there are %d file uploads pending %s', self._files.length, self._files.length === 0 ? '' : '(so it\\'s fine)');","    if (self._files.length === 0) {","      var e = new Error();","      e.code = 'ETIMEOUT';","      e.message =","        e.code + ': ' +","        'An Upstream (`' + self.fieldName + '`) timed out waiting for file(s). ' +","        'No files were sent after waiting ' + opts.maxTimeToWaitForFirstFile + 'ms.';","      self.fatalIncomingError(e);","    }","  }, opts.maxTimeToWaitForFirstFile);","  debug('Set up \"maxTimeToWaitForFirstFile\" timer for %dms', opts.maxTimeToWaitForFirstFile);","","  // Enforce the `maxTimeToBuffer` option.","  //","  // Note:","  // This consideration really ought to be taken care of by the normal highWaterMark","  // stuff.  As it is, you may not even want a `maxTimeToBuffer` in certain cases","  // since you may be perfectly happy waiting as long as necessary; provided back-pressure","  // is being properly applied in the receiver (we know with almost complete certainty that","  // it's being properly applied in the sending stream because it's a request- with the caveat","  // that it is possible to build your own fake request stream, e.g. the request interpreter in","  // Sails, or MockReq)","  this.timeouts.untilMaxBufferTimer = setTimeout(function() {","    debug('maxTimeToBuffer timer fired- upstream is %s As of now there are %d file uploads', self._connected?'connected to a receiver (so we\\'re good).':'NOT CONNECTED TO A RECEIVER!!',self._files.length);","    if (!self._connected) {","      var e = new Error();","      e.code = 'EMAXBUFFER';","      e.message =","        e.code + ': ' +","        'An Upstream (`' + self.fieldName + '`) timed out before it was plugged into a receiver. ' +","        'It was still unused after waiting ' + opts.maxTimeToBuffer + 'ms. ' +","        'You can configure this timeout by changing the `maxTimeToBuffer` option.';","      self.fatalIncomingError(e);","    }","  }, opts.maxTimeToBuffer);","}","","","","Upstream.prototype._read = require('./prototype._read');","Upstream.prototype.pipe = require('./prototype.pipe');","Upstream.prototype.upload = require('./prototype.upload');","Upstream.prototype.serializeFiles = require('./prototype.serializeFiles');","Upstream.prototype.writeFile = require('./prototype.writeFile');","Upstream.prototype.fatalIncomingError = require('./prototype.fatalIncomingError');","Upstream.prototype.noMoreFiles = require('./prototype.noMoreFiles');","","","","","","","","module.exports = Upstream;",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"14":1,"20":1,"21":0,"23":0,"24":0,"45":0,"48":0,"51":0,"54":0,"56":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"68":0,"71":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"93":0,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"114":1}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper-disk/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper-disk/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"DiskStore","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":45}}},"2":{"name":"_noOpLog","line":23,"loc":{"start":{"line":23,"column":27},"end":{"line":23,"column":47}}},"3":{"name":"(anonymous_3)","line":26,"loc":{"start":{"line":26,"column":15},"end":{"line":26,"column":32}}},"4":{"name":"(anonymous_4)","line":27,"loc":{"start":{"line":27,"column":26},"end":{"line":27,"column":40}}},"5":{"name":"(anonymous_5)","line":35,"loc":{"start":{"line":35,"column":15},"end":{"line":35,"column":37}}},"6":{"name":"(anonymous_6)","line":36,"loc":{"start":{"line":36,"column":32},"end":{"line":36,"column":53}}},"7":{"name":"(anonymous_7)","line":38,"loc":{"start":{"line":38,"column":50},"end":{"line":38,"column":72}}},"8":{"name":"(anonymous_8)","line":47,"loc":{"start":{"line":47,"column":17},"end":{"line":47,"column":34}}},"9":{"name":"(anonymous_9)","line":55,"loc":{"start":{"line":55,"column":20},"end":{"line":55,"column":35}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":30}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":83}},"5":{"start":{"line":20,"column":0},"end":{"line":60,"column":2}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":26}},"7":{"start":{"line":23,"column":2},"end":{"line":23,"column":50}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":19}},"9":{"start":{"line":26,"column":2},"end":{"line":33,"column":4}},"10":{"start":{"line":27,"column":4},"end":{"line":32,"column":7}},"11":{"start":{"line":29,"column":6},"end":{"line":31,"column":25}},"12":{"start":{"line":30,"column":8},"end":{"line":30,"column":23}},"13":{"start":{"line":31,"column":13},"end":{"line":31,"column":25}},"14":{"start":{"line":35,"column":2},"end":{"line":45,"column":4}},"15":{"start":{"line":36,"column":4},"end":{"line":44,"column":7}},"16":{"start":{"line":37,"column":6},"end":{"line":37,"column":30}},"17":{"start":{"line":37,"column":15},"end":{"line":37,"column":30}},"18":{"start":{"line":38,"column":6},"end":{"line":42,"column":13}},"19":{"start":{"line":39,"column":8},"end":{"line":39,"column":45}},"20":{"start":{"line":40,"column":8},"end":{"line":40,"column":19}},"21":{"start":{"line":41,"column":8},"end":{"line":41,"column":17}},"22":{"start":{"line":43,"column":6},"end":{"line":43,"column":22}},"23":{"start":{"line":47,"column":2},"end":{"line":53,"column":4}},"24":{"start":{"line":48,"column":4},"end":{"line":52,"column":5}},"25":{"start":{"line":49,"column":6},"end":{"line":49,"column":34}},"26":{"start":{"line":51,"column":6},"end":{"line":51,"column":38}},"27":{"start":{"line":55,"column":2},"end":{"line":57,"column":4}},"28":{"start":{"line":56,"column":4},"end":{"line":56,"column":73}},"29":{"start":{"line":59,"column":2},"end":{"line":59,"column":17}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":12},"end":{"line":21,"column":19}},{"start":{"line":21,"column":23},"end":{"line":21,"column":25}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":12},"end":{"line":23,"column":23}},{"start":{"line":23,"column":27},"end":{"line":23,"column":49}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"4":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":10},"end":{"line":29,"column":13}},{"start":{"line":29,"column":18},"end":{"line":29,"column":41}},{"start":{"line":29,"column":45},"end":{"line":29,"column":66}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"6":{"line":38,"type":"cond-expr","locations":[{"start":{"line":38,"column":40},"end":{"line":38,"column":45}},{"start":{"line":38,"column":46},"end":{"line":38,"column":48}}]},"7":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var path = require('path');","var _ = require('lodash');","var fsx = require('fs-extra');","var r_buildDiskReceiverStream = require('./standalone/build-disk-receiver-stream');","","","","/**"," * skipper-disk"," *"," * @type {Function}"," * @param  {Object} options"," * @return {Object}"," */","","module.exports = function DiskStore(options) {","  options = options || {};","","  var log = options.log || function _noOpLog() {};","","  var adapter = {};","  adapter.rm = function(fd, cb) {","    return fsx.unlink(fd, function(err) {","      // Ignore \"doesn't exist\" errors","      if (err && (typeof err !== 'object' || err.code !== 'ENOENT')) {","        return cb(err);","      } else return cb();","    });","  };","","  adapter.ls = function(dirpath, cb) {","    return fsx.readdir(dirpath, function (err, files){","      if (err) return cb(err);","      files = _.reduce(_.isArray(files)?files:[], function (m, filename){","        var fd = path.join(dirpath,filename);","        m.push(fd);","        return m;","      }, []);","      cb(null, files);","    });","  };","","  adapter.read = function(fd, cb) {","    if (cb) {","      return fsx.readFile(fd, cb);","    } else {","      return fsx.createReadStream(fd);","    }","  };","","  adapter.receive = function(opts) {","    return r_buildDiskReceiverStream(_.defaults(opts, options), adapter);","  };","","  return adapter;","};","","","","",""],"l":{"5":1,"6":1,"7":1,"8":1,"20":1,"21":0,"23":0,"25":0,"26":0,"27":0,"29":0,"30":0,"31":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"43":0,"47":0,"48":0,"49":0,"51":0,"55":0,"56":0,"59":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper-disk/standalone/build-disk-receiver-stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper-disk/standalone/build-disk-receiver-stream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"buildDiskReceiverStream","line":24,"loc":{"start":{"line":24,"column":17},"end":{"line":24,"column":68}}},"2":{"name":"noOpLog","line":26,"loc":{"start":{"line":26,"column":27},"end":{"line":26,"column":45}}},"3":{"name":"onFile","line":84,"loc":{"start":{"line":84,"column":22},"end":{"line":84,"column":65}}},"4":{"name":"(anonymous_4)","line":96,"loc":{"start":{"line":96,"column":43},"end":{"line":96,"column":63}}},"5":{"name":"(anonymous_5)","line":106,"loc":{"start":{"line":106,"column":28},"end":{"line":106,"column":42}}},"6":{"name":"successfullyWroteFile","line":115,"loc":{"start":{"line":115,"column":26},"end":{"line":115,"column":59}}},"7":{"name":"(anonymous_7)","line":135,"loc":{"start":{"line":135,"column":42},"end":{"line":135,"column":57}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":26}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":30}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":63}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":45}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":27}},"8":{"start":{"line":24,"column":0},"end":{"line":152,"column":2}},"9":{"start":{"line":25,"column":2},"end":{"line":25,"column":26}},"10":{"start":{"line":26,"column":2},"end":{"line":26,"column":48}},"11":{"start":{"line":30,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":31,"column":4},"end":{"line":31,"column":70}},"13":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"14":{"start":{"line":33,"column":6},"end":{"line":33,"column":61}},"15":{"start":{"line":37,"column":2},"end":{"line":62,"column":5}},"16":{"start":{"line":65,"column":2},"end":{"line":65,"column":56}},"17":{"start":{"line":68,"column":2},"end":{"line":70,"column":3}},"18":{"start":{"line":69,"column":4},"end":{"line":69,"column":50}},"19":{"start":{"line":74,"column":2},"end":{"line":74,"column":25}},"20":{"start":{"line":78,"column":2},"end":{"line":78,"column":28}},"21":{"start":{"line":84,"column":2},"end":{"line":149,"column":4}},"22":{"start":{"line":91,"column":4},"end":{"line":93,"column":5}},"23":{"start":{"line":92,"column":6},"end":{"line":92,"column":79}},"24":{"start":{"line":96,"column":4},"end":{"line":147,"column":7}},"25":{"start":{"line":100,"column":6},"end":{"line":102,"column":7}},"26":{"start":{"line":101,"column":8},"end":{"line":101,"column":31}},"27":{"start":{"line":105,"column":6},"end":{"line":105,"column":71}},"28":{"start":{"line":106,"column":6},"end":{"line":109,"column":9}},"29":{"start":{"line":107,"column":8},"end":{"line":107,"column":92}},"30":{"start":{"line":108,"column":8},"end":{"line":108,"column":73}},"31":{"start":{"line":112,"column":6},"end":{"line":112,"column":65}},"32":{"start":{"line":115,"column":6},"end":{"line":134,"column":9}},"33":{"start":{"line":116,"column":8},"end":{"line":116,"column":52}},"34":{"start":{"line":118,"column":8},"end":{"line":118,"column":65}},"35":{"start":{"line":119,"column":8},"end":{"line":130,"column":9}},"36":{"start":{"line":122,"column":10},"end":{"line":122,"column":43}},"37":{"start":{"line":127,"column":10},"end":{"line":127,"column":194}},"38":{"start":{"line":128,"column":10},"end":{"line":128,"column":46}},"39":{"start":{"line":129,"column":10},"end":{"line":129,"column":59}},"40":{"start":{"line":132,"column":8},"end":{"line":132,"column":48}},"41":{"start":{"line":133,"column":8},"end":{"line":133,"column":15}},"42":{"start":{"line":135,"column":6},"end":{"line":137,"column":9}},"43":{"start":{"line":136,"column":8},"end":{"line":136,"column":18}},"44":{"start":{"line":139,"column":6},"end":{"line":139,"column":96}},"45":{"start":{"line":143,"column":6},"end":{"line":145,"column":22}},"46":{"start":{"line":151,"column":2},"end":{"line":151,"column":20}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":12},"end":{"line":25,"column":19}},{"start":{"line":25,"column":23},"end":{"line":25,"column":25}}]},"2":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":23}},{"start":{"line":26,"column":27},"end":{"line":26,"column":47}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"4":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"6":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"7":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":6},"end":{"line":100,"column":6}},{"start":{"line":100,"column":6},"end":{"line":100,"column":6}}]},"8":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":75},"end":{"line":107,"column":78}},{"start":{"line":107,"column":80},"end":{"line":107,"column":89}}]},"9":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":119,"column":8}},{"start":{"line":119,"column":8},"end":{"line":119,"column":8}}]}},"code":["/**"," * Module dependencies"," */","","var WritableStream = require('stream').Writable;","var path = require('path');","var _ = require('lodash');","var fsx = require('fs-extra');","var r_buildProgressStream = require('./build-progress-stream');","var debug = require('debug')('skipper-disk');","var util = require('util');","","","/**"," * A simple receiver for Skipper that writes Upstreams to"," * disk at the configured path."," *"," * Includes a garbage-collection mechanism for failed"," * uploads."," *"," * @param  {Object} options"," * @return {Stream.Writable}"," */","module.exports = function buildDiskReceiverStream(options, adapter) {","  options = options || {};","  var log = options.log || function noOpLog(){};","","  // if maxBytes is configed in \"MB\" ended string","  // convert it into bytes","  if (options.maxBytes) {","    var _maxBytesRegResult = (options.maxBytes + '').match(/(\\d+)m/i);","    if (_maxBytesRegResult != null){","      options.maxBytes = _maxBytesRegResult[1] * 1024 * 1024;","    }","  };","","  _.defaults(options, {","","    // // The default `saveAs` implements a unique filename by combining:","    // //  • a generated UUID  (like \"4d5f444-38b4-4dc3-b9c3-74cb7fbbc932\")","    // //  • the uploaded file's original extension (like \".jpg\")","    // saveAs: function(__newFile, cb) {","    //   return cb(null, UUIDGenerator.v4() + path.extname(__newFile.filename));","    // },","","    // Bind a progress event handler, e.g.:","    // function (milestone) {","    //   milestone.id;","    //   milestone.name;","    //   milestone.written;","    //   milestone.total;","    //   milestone.percent;","    // },","    onProgress: undefined,","","    // Upload limit (in bytes)","    // defaults to ~15MB","    maxBytes: 15000000,","","    // By default, upload files to `./.tmp/uploads` (relative to cwd)","    dirname: '.tmp/uploads'","  });","","","  var receiver__ = WritableStream({ objectMode: true });","","  // if onProgress handler was provided, bind an event automatically:","  if (_.isFunction(options.onProgress)) {","    receiver__.on('progress', options.onProgress);","  }","","  // Track the progress of all file uploads that pass through this receiver","  // through one or more attached Upstream(s).","  receiver__._files = [];","","  // Keep track of the number total bytes written so that maxBytes can","  // be enforced.","  var totalBytesWritten = 0;","","","  // This `_write` method is invoked each time a new file is received","  // from the Readable stream (Upstream) which is pumping filestreams","  // into this receiver.  (filename === `__newFile.filename`).","  receiver__._write = function onFile(__newFile, encoding, done) {","","    // `__newFile.fd` is the file descriptor-- the unique identifier.","    // Often represents the location where file should be written.","","    // If fd DOESNT have leading slash, resolve the path","    // from process.cwd()","    if (!__newFile.fd.match(/^\\//)) {","      __newFile.fd = path.resolve(process.cwd(), '.tmp/uploads', __newFile.fd);","    }","","    // Ensure necessary parent directories exist:","    fsx.mkdirs(path.dirname(__newFile.fd), function(mkdirsErr) {","      // If we get an error here, it's probably because the Node","      // user doesn't have write permissions at the designated","      // path.","      if (mkdirsErr) {","        return done(mkdirsErr);","      }","","      // Error reading from the file stream","      debug('binding error handler for incoming file in skipper-disk');","      __newFile.on('error', function(err) {","        debug('Read error on file '+__newFile.filename+ '::'+ util.inspect(err&&err.stack));","        log('***** READ error on file ' + __newFile.filename, '::', err);","      });","","      // Create a new write stream to write to disk","      var outs__ = fsx.createWriteStream(__newFile.fd, encoding);","","      // When the file is done writing, call the callback","      outs__.on('finish', function successfullyWroteFile() {","        log('finished file: ' + __newFile.filename);","        // File the file entry in the receiver with the same fd as the finished stream.","        var file = _.find(receiver__._files, {fd: __newFile.fd});","        if (file) {","          // Set the byteCount of the stream to the \"total\" value of the file, which has","          // been updated as the file was written.","          __newFile.byteCount = file.total;","        }","        // If we couldn't find the file in the receiver, that's super weird, but output","        // a notice and try to continue anyway.","        else {","          debug('Warning: received `finish` event for file `' + __newFile.filename + '` uploaded via field `' + __newFile.field + '`, but could not find a record of that file in the receiver.');","          debug('Was this a zero-byte file?');","          debug('Attempting to return the file anyway...');","        }","        // Indicate that a file was persisted.","        receiver__.emit('writefile', __newFile);","        done();","      });","      outs__.on('E_EXCEEDS_UPLOAD_LIMIT', function (err) {","        done(err);","      });","","      var __progress__ = r_buildProgressStream(options, __newFile, receiver__, outs__, adapter);","","      // Finally pipe the progress THROUGH the progress stream","      // and out to disk.","      __newFile","        .pipe(__progress__)","        .pipe(outs__);","","    });","","  };","","  return receiver__;","}; // </DiskReceiver>",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"24":1,"25":0,"26":0,"30":0,"31":0,"32":0,"33":0,"37":0,"65":0,"68":0,"69":0,"74":0,"78":0,"84":0,"91":0,"92":0,"96":0,"100":0,"101":0,"105":0,"106":0,"107":0,"108":0,"112":0,"115":0,"116":0,"118":0,"119":0,"122":0,"127":0,"128":0,"129":0,"132":0,"133":0,"135":0,"136":0,"139":0,"143":0,"151":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper-disk/standalone/build-progress-stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper-disk/standalone/build-progress-stream.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"buildProgressStream","line":18,"loc":{"start":{"line":18,"column":17},"end":{"line":18,"column":96}}},"2":{"name":"noOpLog","line":20,"loc":{"start":{"line":20,"column":27},"end":{"line":20,"column":45}}},"3":{"name":"(anonymous_3)","line":29,"loc":{"start":{"line":29,"column":28},"end":{"line":29,"column":59}}},"4":{"name":"singleFileProgress","line":70,"loc":{"start":{"line":70,"column":30},"end":{"line":70,"column":69}}},"5":{"name":"(anonymous_5)","line":99,"loc":{"start":{"line":99,"column":56},"end":{"line":99,"column":79}}},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":23},"end":{"line":123,"column":34}}},"7":{"name":"gc","line":127,"loc":{"start":{"line":127,"column":7},"end":{"line":127,"column":24}}},"8":{"name":"(anonymous_8)","line":131,"loc":{"start":{"line":131,"column":33},"end":{"line":131,"column":49}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":50}},"3":{"start":{"line":18,"column":0},"end":{"line":149,"column":2}},"4":{"start":{"line":19,"column":2},"end":{"line":19,"column":26}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":48}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":29}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":23}},"8":{"start":{"line":27,"column":2},"end":{"line":27,"column":23}},"9":{"start":{"line":28,"column":2},"end":{"line":28,"column":43}},"10":{"start":{"line":29,"column":2},"end":{"line":51,"column":4}},"11":{"start":{"line":33,"column":4},"end":{"line":33,"column":33}},"12":{"start":{"line":34,"column":4},"end":{"line":34,"column":33}},"13":{"start":{"line":38,"column":4},"end":{"line":38,"column":21}},"14":{"start":{"line":42,"column":4},"end":{"line":49,"column":7}},"15":{"start":{"line":50,"column":4},"end":{"line":50,"column":11}},"16":{"start":{"line":70,"column":2},"end":{"line":146,"column":5}},"17":{"start":{"line":73,"column":4},"end":{"line":75,"column":7}},"18":{"start":{"line":76,"column":4},"end":{"line":92,"column":5}},"19":{"start":{"line":77,"column":6},"end":{"line":77,"column":54}},"20":{"start":{"line":78,"column":6},"end":{"line":78,"column":50}},"21":{"start":{"line":79,"column":6},"end":{"line":79,"column":54}},"22":{"start":{"line":80,"column":6},"end":{"line":80,"column":45}},"23":{"start":{"line":82,"column":6},"end":{"line":90,"column":8}},"24":{"start":{"line":91,"column":6},"end":{"line":91,"column":50}},"25":{"start":{"line":99,"column":4},"end":{"line":102,"column":10}},"26":{"start":{"line":100,"column":6},"end":{"line":100,"column":29}},"27":{"start":{"line":101,"column":6},"end":{"line":101,"column":18}},"28":{"start":{"line":104,"column":4},"end":{"line":104,"column":191}},"29":{"start":{"line":108,"column":4},"end":{"line":108,"column":53}},"30":{"start":{"line":111,"column":4},"end":{"line":144,"column":5}},"31":{"start":{"line":113,"column":6},"end":{"line":113,"column":28}},"32":{"start":{"line":114,"column":6},"end":{"line":114,"column":42}},"33":{"start":{"line":115,"column":6},"end":{"line":115,"column":32}},"34":{"start":{"line":116,"column":6},"end":{"line":116,"column":38}},"35":{"start":{"line":117,"column":6},"end":{"line":117,"column":38}},"36":{"start":{"line":118,"column":6},"end":{"line":118,"column":110}},"37":{"start":{"line":121,"column":6},"end":{"line":121,"column":50}},"38":{"start":{"line":123,"column":6},"end":{"line":125,"column":9}},"39":{"start":{"line":124,"column":8},"end":{"line":124,"column":30}},"40":{"start":{"line":127,"column":6},"end":{"line":135,"column":14}},"41":{"start":{"line":130,"column":8},"end":{"line":130,"column":117}},"42":{"start":{"line":131,"column":8},"end":{"line":134,"column":11}},"43":{"start":{"line":132,"column":10},"end":{"line":132,"column":88}},"44":{"start":{"line":132,"column":21},"end":{"line":132,"column":88}},"45":{"start":{"line":133,"column":10},"end":{"line":133,"column":59}},"46":{"start":{"line":137,"column":6},"end":{"line":137,"column":13}},"47":{"start":{"line":148,"column":2},"end":{"line":148,"column":22}}},"branchMap":{"1":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":12},"end":{"line":19,"column":19}},{"start":{"line":19,"column":23},"end":{"line":19,"column":25}}]},"2":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":12},"end":{"line":20,"column":23}},{"start":{"line":20,"column":27},"end":{"line":20,"column":47}}]},"3":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":4},"end":{"line":76,"column":4}},{"start":{"line":76,"column":4},"end":{"line":76,"column":4}}]},"4":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":111,"column":4}},{"start":{"line":111,"column":4},"end":{"line":111,"column":4}}]},"5":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":24}},{"start":{"line":111,"column":28},"end":{"line":111,"column":65}}]},"6":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":10},"end":{"line":132,"column":10}},{"start":{"line":132,"column":10},"end":{"line":132,"column":10}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var TransformStream = require('stream').Transform;","","","","/**"," * [exports description]"," * @param  {[type]} options    [description]"," * @param  {[type]} __newFile  [description]"," * @param  {[type]} receiver__ [description]"," * @param  {[type]} outs__     [description]"," * @return {[type]}            [description]"," */","module.exports = function buildProgressStream (options, __newFile, receiver__, outs__, adapter) {","  options = options || {};","  var log = options.log || function noOpLog(){};","","  // Generate a progress stream and unique id for this file","  // then pipe the bytes down to the outs___ stream","  // We will pipe the incoming file stream to this, which will","  var localID = _.uniqueId();","  var guessedTotal = 0;","  var writtenSoFar = 0;","  var __progress__ = new TransformStream();","  __progress__._transform = function(chunk, enctype, next) {","","    // Update the guessedTotal to make % estimate","    // more accurate:","    guessedTotal += chunk.length;","    writtenSoFar += chunk.length;","","    // Do the actual \"writing\", which in our case will pipe","    // the bytes to the outs___ stream that writes to disk","    this.push(chunk);","","    // Emit an event that will calculate our total upload","    // progress and determine whether we're within quota","    this.emit('progress', {","      id: localID,","      fd: __newFile.fd,","      name: __newFile.name,","      written: writtenSoFar,","      total: guessedTotal,","      percent: (writtenSoFar / guessedTotal) * 100 | 0","    });","    next();","  };","","  // This event is fired when a single file stream emits a progress event.","  // Each time we receive a file, we must recalculate the TOTAL progress","  // for the aggregate file upload.","  //","  // events emitted look like:","  /*","  {","    percentage: 9.05,","    transferred: 949624,","    length: 10485760,","    remaining: 9536136,","    eta: 10,","    runtime: 0,","    delta: 295396,","    speed: 949624","  }","  */","  __progress__.on('progress', function singleFileProgress(milestone) {","","    // Lookup or create new object to track file progress","    var currentFileProgress = _.find(receiver__._files, {","      id: localID","    });","    if (currentFileProgress) {","      currentFileProgress.written = milestone.written;","      currentFileProgress.total = milestone.total;","      currentFileProgress.percent = milestone.percent;","      currentFileProgress.stream = __newFile;","    } else {","      currentFileProgress = {","        id: localID,","        fd: __newFile.fd,","        name: __newFile.filename,","        written: milestone.written,","        total: milestone.total,","        percent: milestone.percent,","        stream: __newFile","      };","      receiver__._files.push(currentFileProgress);","    }","    ////////////////////////////////////////////////////////////////","","","    // Recalculate `totalBytesWritten` so far for this receiver instance","    // (across ALL OF ITS FILES)","    // using the sum of all bytes written to each file in `receiver__._files`","    var totalBytesWritten = _.reduce(receiver__._files, function(memo, status) {","      memo += status.written;","      return memo;","    }, 0);","","    log(currentFileProgress.percent, '::', currentFileProgress.written, '/', currentFileProgress.total, '       (file #' + currentFileProgress.id + '   :: ' + /*'update#'+counter*/ '' + ')'); //receiver__._files.length+' files)');","","    // Emit an event on the receiver.  Someone using Skipper may listen for this to show","    // a progress bar, for example.","    receiver__.emit('progress', currentFileProgress);","","    // and then enforce its `maxBytes`.","    if (options.maxBytes && totalBytesWritten >= options.maxBytes) {","","      var err = new Error();","      err.code = 'E_EXCEEDS_UPLOAD_LIMIT';","      err.name = 'Upload Error';","      err.maxBytes = options.maxBytes;","      err.written = totalBytesWritten;","      err.message = 'Upload limit of ' + err.maxBytes + ' bytes exceeded (' + err.written + ' bytes written)';","","      // Stop listening for progress events","      __progress__.removeAllListeners('progress');","      // Unpipe the progress stream, which feeds the disk stream, so we don't keep dumping to disk","      process.nextTick(function() {","        __progress__.unpipe();","      });","      // Clean up any files we've already written","      (function gc(err) {","      // Garbage-collects the bytes that were already written for this file.","      // (called when a read or write error occurs)","        log('************** Garbage collecting file `' + __newFile.filename + '` located @ ' + __newFile.fd + '...');","        adapter.rm(__newFile.fd, function(gcErr) {","          if (gcErr) return outs__.emit('E_EXCEEDS_UPLOAD_LIMIT',[err].concat([gcErr]));","          return outs__.emit('E_EXCEEDS_UPLOAD_LIMIT',err);","        });","      })(err);","","      return;","","      // Don't do this--it releases the underlying pipes, which confuses node when it's in the middle","      // of a write operation.","      // outs__.emit('error', err);","      //","      //","    }","","  });","","  return __progress__;","};",""],"l":{"5":1,"6":1,"18":1,"19":0,"20":0,"25":0,"26":0,"27":0,"28":0,"29":0,"33":0,"34":0,"38":0,"42":0,"50":0,"70":0,"73":0,"76":0,"77":0,"78":0,"79":0,"80":0,"82":0,"91":0,"99":0,"100":0,"101":0,"104":0,"108":0,"111":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"121":0,"123":0,"124":0,"127":0,"130":0,"131":0,"132":0,"133":0,"137":0,"148":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype._read.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype._read.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"onNewDataRequested","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":64}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":40}},"2":{"start":{"line":10,"column":0},"end":{"line":26,"column":2}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":38}},"4":{"start":{"line":11,"column":31},"end":{"line":11,"column":38}},"5":{"start":{"line":20,"column":2},"end":{"line":20,"column":76}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":45}},"7":{"start":{"line":25,"column":19},"end":{"line":25,"column":45}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":2},"end":{"line":11,"column":2}},{"start":{"line":11,"column":2},"end":{"line":11,"column":2}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]}},"code":["/**"," * Module dependencies"," */","","var debug = require('debug')('skipper');","","","","","module.exports = function onNewDataRequested(numBytesRequested) {","  if (numBytesRequested === 0) return;","","  // <todo>","  // re: line 70 of `prototype.writeFile.js`:","  // resume the flow of incoming part streams coming off the MPU request","  // </todo>","","  // Don't really need to do anything in here for now as far as pushing data--","  // we'll push to the receiving writestream when we're ready.","  debug('Something is trying to read from Upstream `%s`...',this.fieldName);","","","  // If we are a no-op Upstream, push `null` (ending the pipe) as soon","  // as something tries to read us.","  if (this.isNoop) return this.noMoreFiles();","};",""],"l":{"5":1,"10":1,"11":0,"20":0,"25":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.pipe.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.pipe.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"pipe","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":63}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":19},"end":{"line":25,"column":30}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":21},"end":{"line":28,"column":32}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":42}},"2":{"start":{"line":20,"column":0},"end":{"line":32,"column":2}},"3":{"start":{"line":21,"column":2},"end":{"line":21,"column":18}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":25}},"5":{"start":{"line":24,"column":2},"end":{"line":24,"column":32}},"6":{"start":{"line":25,"column":2},"end":{"line":27,"column":5}},"7":{"start":{"line":26,"column":4},"end":{"line":26,"column":28}},"8":{"start":{"line":28,"column":2},"end":{"line":30,"column":5}},"9":{"start":{"line":29,"column":4},"end":{"line":29,"column":30}},"10":{"start":{"line":31,"column":2},"end":{"line":31,"column":84}}},"branchMap":{},"code":["/**"," * Module dependencies"," */","","var Readable = require('stream').Readable;","","","","/**"," * Override pipe so we know when this starts getting consumed."," *"," * Here, we set a flag indicating that we're being read out of"," * by at least one connected receiver."," *"," * @this {Upstream}"," * @return {Upstream} this"," * @chainable"," */","","module.exports = function pipe ( /* destination, [options] */) {","  var self = this;","","  self._connected = true;","  self._receiver = arguments[0];","  self.once('end', function (){","    self._emittedEnd = true;","  });","  self.once('error', function (){","    self._emittedError = true;","  });","  return Readable.prototype.pipe.apply(self, Array.prototype.slice.call(arguments));","};",""],"l":{"5":1,"20":1,"21":0,"23":0,"24":0,"25":0,"26":0,"28":0,"29":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.upload.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.upload.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"upload","line":43,"loc":{"start":{"line":43,"column":17},"end":{"line":43,"column":45}}},"2":{"name":"(anonymous_2)","line":70,"loc":{"start":{"line":70,"column":18},"end":{"line":70,"column":45}}},"3":{"name":"(anonymous_3)","line":77,"loc":{"start":{"line":77,"column":11},"end":{"line":77,"column":32}}},"4":{"name":"(anonymous_4)","line":96,"loc":{"start":{"line":96,"column":24},"end":{"line":96,"column":39}}},"5":{"name":"(anonymous_5)","line":98,"loc":{"start":{"line":98,"column":21},"end":{"line":98,"column":51}}},"6":{"name":"(anonymous_6)","line":110,"loc":{"start":{"line":110,"column":21},"end":{"line":110,"column":35}}},"7":{"name":"(anonymous_7)","line":126,"loc":{"start":{"line":126,"column":28},"end":{"line":126,"column":48}}},"8":{"name":"(anonymous_8)","line":132,"loc":{"start":{"line":132,"column":29},"end":{"line":132,"column":50}}},"9":{"name":"allFilesUploaded","line":140,"loc":{"start":{"line":140,"column":28},"end":{"line":140,"column":56}}},"10":{"name":"unableToUpload","line":148,"loc":{"start":{"line":148,"column":25},"end":{"line":148,"column":54}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":27}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":31}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":72}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":61}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"9":{"start":{"line":43,"column":0},"end":{"line":187,"column":2}},"10":{"start":{"line":44,"column":2},"end":{"line":44,"column":18}},"11":{"start":{"line":45,"column":2},"end":{"line":45,"column":48}},"12":{"start":{"line":48,"column":2},"end":{"line":51,"column":3}},"13":{"start":{"line":49,"column":4},"end":{"line":49,"column":15}},"14":{"start":{"line":50,"column":4},"end":{"line":50,"column":14}},"15":{"start":{"line":55,"column":2},"end":{"line":57,"column":3}},"16":{"start":{"line":56,"column":4},"end":{"line":56,"column":28}},"17":{"start":{"line":60,"column":2},"end":{"line":73,"column":3}},"18":{"start":{"line":64,"column":4},"end":{"line":67,"column":5}},"19":{"start":{"line":65,"column":6},"end":{"line":65,"column":63}},"20":{"start":{"line":66,"column":6},"end":{"line":66,"column":47}},"21":{"start":{"line":69,"column":4},"end":{"line":69,"column":38}},"22":{"start":{"line":70,"column":4},"end":{"line":72,"column":6}},"23":{"start":{"line":71,"column":6},"end":{"line":71,"column":34}},"24":{"start":{"line":76,"column":2},"end":{"line":76,"column":18}},"25":{"start":{"line":77,"column":2},"end":{"line":87,"column":4}},"26":{"start":{"line":78,"column":4},"end":{"line":78,"column":28}},"27":{"start":{"line":78,"column":21},"end":{"line":78,"column":28}},"28":{"start":{"line":79,"column":4},"end":{"line":79,"column":23}},"29":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"30":{"start":{"line":82,"column":6},"end":{"line":82,"column":29}},"31":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"32":{"start":{"line":85,"column":6},"end":{"line":85,"column":16}},"33":{"start":{"line":89,"column":2},"end":{"line":89,"column":40}},"34":{"start":{"line":93,"column":2},"end":{"line":107,"column":3}},"35":{"start":{"line":94,"column":4},"end":{"line":94,"column":96}},"36":{"start":{"line":96,"column":4},"end":{"line":103,"column":7}},"37":{"start":{"line":97,"column":6},"end":{"line":97,"column":33}},"38":{"start":{"line":98,"column":6},"end":{"line":100,"column":8}},"39":{"start":{"line":99,"column":8},"end":{"line":99,"column":13}},"40":{"start":{"line":101,"column":6},"end":{"line":101,"column":27}},"41":{"start":{"line":102,"column":6},"end":{"line":102,"column":30}},"42":{"start":{"line":106,"column":4},"end":{"line":106,"column":36}},"43":{"start":{"line":110,"column":2},"end":{"line":113,"column":5}},"44":{"start":{"line":111,"column":4},"end":{"line":111,"column":103}},"45":{"start":{"line":112,"column":4},"end":{"line":112,"column":19}},"46":{"start":{"line":117,"column":2},"end":{"line":117,"column":17}},"47":{"start":{"line":118,"column":2},"end":{"line":121,"column":3}},"48":{"start":{"line":118,"column":8},"end":{"line":118,"column":52}},"49":{"start":{"line":120,"column":4},"end":{"line":120,"column":17}},"50":{"start":{"line":126,"column":2},"end":{"line":128,"column":5}},"51":{"start":{"line":127,"column":4},"end":{"line":127,"column":37}},"52":{"start":{"line":132,"column":2},"end":{"line":135,"column":5}},"53":{"start":{"line":133,"column":4},"end":{"line":133,"column":57}},"54":{"start":{"line":134,"column":4},"end":{"line":134,"column":29}},"55":{"start":{"line":140,"column":2},"end":{"line":144,"column":5}},"56":{"start":{"line":141,"column":4},"end":{"line":141,"column":108}},"57":{"start":{"line":142,"column":4},"end":{"line":142,"column":99}},"58":{"start":{"line":143,"column":4},"end":{"line":143,"column":36}},"59":{"start":{"line":148,"column":2},"end":{"line":156,"column":5}},"60":{"start":{"line":149,"column":4},"end":{"line":149,"column":127}},"61":{"start":{"line":152,"column":4},"end":{"line":152,"column":33}},"62":{"start":{"line":155,"column":4},"end":{"line":155,"column":35}},"63":{"start":{"line":171,"column":2},"end":{"line":175,"column":5}},"64":{"start":{"line":183,"column":2},"end":{"line":183,"column":42}},"65":{"start":{"line":186,"column":2},"end":{"line":186,"column":14}}},"branchMap":{"1":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":19}},{"start":{"line":48,"column":23},"end":{"line":48,"column":57}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":2},"end":{"line":55,"column":2}},{"start":{"line":55,"column":2},"end":{"line":55,"column":2}}]},"4":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"5":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":30}},{"start":{"line":60,"column":34},"end":{"line":60,"column":65}}]},"6":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"7":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":21},"end":{"line":65,"column":33}},{"start":{"line":65,"column":37},"end":{"line":65,"column":62}}]},"8":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"9":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"10":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]},"11":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var path = require('path');","var util = require('util');","var log = require('../logger');","var buildOrNormalizeReceiver = require('./build-or-normalize-receiver');","var r_buildRenamerStream = require('./build-renamer-stream');","var debug = require('debug')('skipper');","var Writable = require('stream').Writable; // (for the leaky pipe)","","","/**"," * upload()"," *"," * Convenience method to pipe to a write stream"," * and provide a traditional node callback."," *"," * Usage:"," *"," * ```"," * .upload(receiver, cb)"," * .upload(receiver)"," * .upload(cb)"," * ```"," *"," * Alternate usage:"," * ```"," * .upload(\"filename.jpg\")"," * .upload({adapter: {receive: receiver}})"," * ```"," *"," * @param  {String|Object|stream.Writable}   opts [optional]"," * @param  {Function} _cb"," * @return {Upstream}"," * @this {Upstream}"," * @api public"," * @chainable"," */","","module.exports = function upload (opts, _cb) {","  var self = this;","  var USAGE = '.upload([receiver] [,callback])';","","  // If first parameter is the callback-function not a `receiver__`","  if (!arguments[1] && typeof arguments[0] === 'function') {","    _cb = opts;","    opts = {};","  }","","  // Handle first argument when it's specified as string","  // (save it as the `saveAs` opt)","  if (typeof opts === 'string') {","    opts = { saveAs: opts };","  }","","  // Handle `saveAs` when it's specified as string (normalize to fn)","  if (typeof opts === 'object' && typeof opts.saveAs === 'string') {","","    // If the string has a leading `/`, interpret it as an absolute path.","    // In that case, we'll infer a value for the \"dirname\" option.","    if (!!opts.saveAs.match(/^\\//)) {","      opts.dirname = opts.dirname || path.dirname(opts.saveAs);","      opts.saveAs = path.basename(opts.saveAs);","    }","    // And in any case, we'll normalize \"saveAs\" to a function","    var desiredFilename = opts.saveAs;","    opts.saveAs = function (__newFile, next) {","      next(null, desiredFilename);","    };","  }","","  // Ensure callback exists and can only be triggered once","  var cbTriggered;","  var cb = function (err, files){","    if (cbTriggered) return;","    cbTriggered = true;","","    if (typeof _cb === 'function') {","      return _cb(err, files);","    }","    if (err) {","      throw err; // (perhaps emit an error on the upstream instead?)","    }","  };","","  debug('.upload() called on upstream');","","  // If a fatal error occurred on this upstream before upload()","  // was called, trigger the callback immediately.","  if (self._fatalErrors.length > 0) {","    debug('Triggering cb w/ error--upstream already has fatal error: %s', self._fatalErrors[0]);","    // self.pipe()","    _.each(self._files, function(file) {","      var leaky = new Writable();","      leaky._write = function(chunk, encoding, cb) {","        cb();","      };","      file.stream.unpipe();","      file.stream.pipe(leaky);","    });","    // self.unpipe();","    // self.unpipe()","    return cb(self._fatalErrors[0]);","  }","","  // If error is emitted on this upstream, trigger the callback","  self.once('error', function (err){","    debug('upstream emitted error, forcing us to trigger the callback for .upload() with err: %s',err);","    return cb(err);","  });","","  // Locate, normalize, and/or build a receiver instance using the value passed in","  // as the first argument (`receiver__`)","  var receiver__;","  try { receiver__ = buildOrNormalizeReceiver(opts); }","  catch (e) {","    return cb(e);","  }","","  // For convenience, pump progress events from the receiver","  // to this upstream.  This allows for interchangable, chainable","  // usage, e.g. `req.file().upload(...).on('progress', ...)`","  receiver__.on('progress', function(milestone) {","    self.emit('progress', milestone);","  });","","  // The receiver supposedly persisted a single file successfully.","  // This should be called once per file in the upstream.","  receiver__.on('writefile', function(fileStream) {","    var file = _.find(self._files, {stream: fileStream});","    file.status = 'finished';","  });","","  // The receiver write stream finished successfully!","  // This should be called when all files in the upstream","  // have been persisted, according to the adapter.","  receiver__.once('finish', function allFilesUploaded() {","    log.color('grey').write('A receiver is finished writing files from Upstream `' + self.fieldName + '`.');","    log.color('grey').write('(this doesn\\'t necessarily mean any files were actually written...)');","    cb(null, self.serializeFiles());","  });","","  // Write stream encountered a fatal error and had to quit early!","  // (some of the files may still have been successfully written, though)","  receiver__.on('error', function unableToUpload(err) {","    log.color('red').write('A receiver handling Upstream `%s` encountered a write error :', self.fieldName, util.inspect(err));","","    // Forcibly end the incoming stream of files on this upstream","    self.fatalIncomingError(err);","","    // Trigger callback","    cb(err, self.serializeFiles());","  });","","  // Build a renamer stream which will construct an `fd` for each incoming file","  // will use the `saveAs` option, or fallback to a UUID.  Also respects `dirname`","  // if provided.","  //","  // So like, the implementation here is really just a shim to make it easier to write","  // FSAdapters by bundling reasonable file renaming functionality out of the box.","  // Bear in mind that the receiver may change this `fd`- that's completely up to it.","  // (for instance the disk adapter resolves paths relative to the current working","  // directory of the Skipper process).  All a receiver needs to do is override the","  // `fd` property on the incoming file stream itself; and of course persist the file","  // in the revised spot.  Then when skipper calls the .upload() callback, it will","  // transparently pass down the updated `fd` in the metadata object for that uploaded","  // file.","  var __renamer__ = r_buildRenamerStream({","    saveAs: opts.saveAs,","    dirname: opts.dirname,","    log: log","  });","","","  // Pipe to the (Writeable) receiver.  Every time the file parser encounters a new file","  // on this stream (i.e. a new file in the same form field), it will call Upstream's","  // writeFile method, which will push the new file stream into Upstream's buffer.  The","  // piping mechanism will then cause \"_write\" to be called on the Receiver, so it can","  // handle the file in whatever way it sees fit (saving to disk, streaming to S3, etc.)","  self.pipe(__renamer__).pipe(receiver__);","","  // Chainable","  return self;","};","","",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"43":1,"44":0,"45":0,"48":0,"49":0,"50":0,"55":0,"56":0,"60":0,"64":0,"65":0,"66":0,"69":0,"70":0,"71":0,"76":0,"77":0,"78":0,"79":0,"81":0,"82":0,"84":0,"85":0,"89":0,"93":0,"94":0,"96":0,"97":0,"98":0,"99":0,"101":0,"102":0,"106":0,"110":0,"111":0,"112":0,"117":0,"118":0,"120":0,"126":0,"127":0,"132":0,"133":0,"134":0,"140":0,"141":0,"142":0,"143":0,"148":0,"149":0,"152":0,"155":0,"171":0,"183":0,"186":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/build-or-normalize-receiver.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/build-or-normalize-receiver.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"buildOrNormalizeReceiver","line":19,"loc":{"start":{"line":19,"column":17},"end":{"line":19,"column":58}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":19},"end":{"line":46,"column":30}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"4":{"start":{"line":19,"column":0},"end":{"line":69,"column":2}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":17}},"6":{"start":{"line":24,"column":2},"end":{"line":32,"column":3}},"7":{"start":{"line":25,"column":4},"end":{"line":25,"column":22}},"8":{"start":{"line":26,"column":4},"end":{"line":26,"column":22}},"9":{"start":{"line":30,"column":7},"end":{"line":32,"column":3}},"10":{"start":{"line":31,"column":4},"end":{"line":31,"column":14}},"11":{"start":{"line":37,"column":2},"end":{"line":37,"column":39}},"12":{"start":{"line":42,"column":2},"end":{"line":50,"column":3}},"13":{"start":{"line":43,"column":4},"end":{"line":43,"column":56}},"14":{"start":{"line":44,"column":4},"end":{"line":44,"column":23}},"15":{"start":{"line":45,"column":4},"end":{"line":45,"column":22}},"16":{"start":{"line":46,"column":4},"end":{"line":48,"column":6}},"17":{"start":{"line":47,"column":6},"end":{"line":47,"column":58}},"18":{"start":{"line":49,"column":4},"end":{"line":49,"column":14}},"19":{"start":{"line":56,"column":2},"end":{"line":56,"column":59}},"20":{"start":{"line":60,"column":2},"end":{"line":62,"column":3}},"21":{"start":{"line":61,"column":4},"end":{"line":61,"column":28}},"22":{"start":{"line":65,"column":2},"end":{"line":65,"column":45}},"23":{"start":{"line":68,"column":2},"end":{"line":68,"column":20}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":24,"column":2}},{"start":{"line":24,"column":2},"end":{"line":24,"column":2}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":30}},{"start":{"line":24,"column":34},"end":{"line":24,"column":47}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":7},"end":{"line":30,"column":7}},{"start":{"line":30,"column":7},"end":{"line":30,"column":7}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]},"5":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":16},"end":{"line":56,"column":36}},{"start":{"line":56,"column":40},"end":{"line":56,"column":58}}]},"6":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]}},"code":["/**"," * Module dependencies"," */","","var path = require('path');","var _ = require('lodash');","var DefaultFileAdapter = require('skipper-disk');","","","","","/**"," * [buildOrNormalizeReceiver description]"," * @param  {[type]} opts [description]"," * @return {[type]}            [description]"," * @api private"," */","","module.exports = function buildOrNormalizeReceiver (opts) {","","  var receiver__;","","  // If a receiver instance was passed in as the first argument, use it directly","  if (typeof opts === 'object' && opts.writable) {","    receiver__ = opts;","    return receiver__;","  }","","  // If the first argument is undefined, treat it as an empty configuration object.","  else if (typeof opts === 'undefined') {","    opts = {};","  }","","","  // Now we can normalize our receiver options","  //////////////////////////////////////////////////////////////////////////////////////////////////////","  var receiverOpts = _.cloneDeep(opts);","","","  // At this point, we know we didn't receive a proper receiver instance, so we should have","  // ended up with a configuration object. Otherwise, this is an error.","  if (typeof receiverOpts !== 'object') {","    var err = new Error('No valid receiver specified!');","    e.code = 'E_USAGE';","    err.usage = USAGE;","    err.toString = function() {","      return err.message + '\\nUsage: ' + err.usage + '\\n';","    };","    throw err;","  }","","  // console.log('receiverOpts:',receiverOpts);","","  // Determine the file adapter to use","  // (defaults to `DefaultFileAdapter`, defined above in the module dependencies at the top of this file)","  var Adapter = receiverOpts.adapter || DefaultFileAdapter;","","  // Support Adapter as either a function","  // or a verbatim adapter object (pass it in directly)","  if (_.isFunction(Adapter)) {","    Adapter = Adapter(opts);","  }","","  // Finally, build a default receiver stream with the specified options","  receiver__ = Adapter.receive(receiverOpts);","","  // and return it.","  return receiver__;","};",""],"l":{"5":1,"6":1,"7":1,"19":1,"21":0,"24":0,"25":0,"26":0,"30":0,"31":0,"37":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"49":0,"56":0,"60":0,"61":0,"65":0,"68":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/build-renamer-stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/build-renamer-stream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"buildRenamerStream","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":55}}},"2":{"name":"noOpLog","line":19,"loc":{"start":{"line":19,"column":27},"end":{"line":19,"column":45}}},"3":{"name":"(anonymous_3)","line":22,"loc":{"start":{"line":22,"column":27},"end":{"line":22,"column":59}}},"4":{"name":"determineBasename","line":26,"loc":{"start":{"line":26,"column":5},"end":{"line":26,"column":37}}},"5":{"name":"(anonymous_5)","line":33,"loc":{"start":{"line":33,"column":31},"end":{"line":33,"column":61}}},"6":{"name":"(anonymous_6)","line":49,"loc":{"start":{"line":49,"column":7},"end":{"line":49,"column":32}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":26}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":39}},"6":{"start":{"line":17,"column":0},"end":{"line":64,"column":2}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":26}},"8":{"start":{"line":19,"column":2},"end":{"line":19,"column":48}},"9":{"start":{"line":21,"column":2},"end":{"line":21,"column":60}},"10":{"start":{"line":22,"column":2},"end":{"line":61,"column":4}},"11":{"start":{"line":26,"column":4},"end":{"line":60,"column":7}},"12":{"start":{"line":28,"column":6},"end":{"line":48,"column":7}},"13":{"start":{"line":29,"column":8},"end":{"line":29,"column":45}},"14":{"start":{"line":32,"column":11},"end":{"line":48,"column":7}},"15":{"start":{"line":33,"column":8},"end":{"line":41,"column":11}},"16":{"start":{"line":34,"column":10},"end":{"line":34,"column":38}},"17":{"start":{"line":34,"column":21},"end":{"line":34,"column":36}},"18":{"start":{"line":36,"column":10},"end":{"line":38,"column":11}},"19":{"start":{"line":37,"column":12},"end":{"line":37,"column":202}},"20":{"start":{"line":40,"column":10},"end":{"line":40,"column":47}},"21":{"start":{"line":47,"column":8},"end":{"line":47,"column":77}},"22":{"start":{"line":50,"column":6},"end":{"line":50,"column":32}},"23":{"start":{"line":50,"column":15},"end":{"line":50,"column":32}},"24":{"start":{"line":52,"column":6},"end":{"line":52,"column":27}},"25":{"start":{"line":53,"column":6},"end":{"line":55,"column":7}},"26":{"start":{"line":54,"column":8},"end":{"line":54,"column":58}},"27":{"start":{"line":57,"column":6},"end":{"line":57,"column":130}},"28":{"start":{"line":58,"column":6},"end":{"line":58,"column":31}},"29":{"start":{"line":59,"column":6},"end":{"line":59,"column":13}},"30":{"start":{"line":63,"column":2},"end":{"line":63,"column":21}}},"branchMap":{"1":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":19}},{"start":{"line":18,"column":23},"end":{"line":18,"column":25}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":12},"end":{"line":19,"column":23}},{"start":{"line":19,"column":27},"end":{"line":19,"column":47}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"4":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":11},"end":{"line":32,"column":11}},{"start":{"line":32,"column":11},"end":{"line":32,"column":11}}]},"5":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":10},"end":{"line":34,"column":10}},{"start":{"line":34,"column":10},"end":{"line":34,"column":10}}]},"6":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":10},"end":{"line":36,"column":10}},{"start":{"line":36,"column":10},"end":{"line":36,"column":10}}]},"7":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"8":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]}},"code":["/**"," * Module dependencies"," */","","var util = require('util');","var path = require('path');","var _ = require('lodash');","var TransformStream = require('stream').Transform;","var UUIDGenerator = require('uuid/v4');","","","/**"," * [exports description]"," * @param  {Object} options    [description]"," * @return {[type]}            [description]"," */","module.exports = function buildRenamerStream (options) {","  options = options || {};","  var log = options.log || function noOpLog(){};","","  var __renamer__ = new TransformStream({objectMode: true});","  __renamer__._transform = function(__file, enctype, next) {","","    // Determine the unique file descriptor (`fd`).","    // Represents the location where file should be written in the remote fs.","    (function determineBasename (cb) {","      // Use the `saveAs` string verbatim","      if (_.isString(options.saveAs)) {","        return cb(undefined, options.saveAs);","      }","      // Run the `saveAs` fn to determine the basename","      else if (_.isFunction(options.saveAs)) {","        options.saveAs(__file, function (err, fdFromUserland){","          if (err) { return cb(err); }","          ","          if (!_.isString(fdFromUserland)) {","            return cb(new Error('The `saveAs` function triggered its callback, but did not send back a valid string as the 2nd argument.  Instead, got: '+util.inspect(fdFromUserland, {depth:null})+''));","          }","          ","          return cb(undefined, fdFromUserland);","        });//</saveAs>","      }","      // The default `saveAs` implements a unique filename by combining:","      //  • a generated UUID  (like \"4d5f444-38b4-4dc3-b9c3-74cb7fbbc932\")","      //  • the uploaded file's original extension (like \".jpg\")","      else {","        return cb(undefined, UUIDGenerator()+ path.extname(__file.filename));","      }","    })(function (err, basename) {","      if (err) return next(err);","","      __file.fd = basename;","      if (_.isString(options.dirname)) {","        __file.fd = path.join(options.dirname, __file.fd);","      }","","      log.color('blue').write('RenamerPump:\\n• dirname => %s\\n• field => %s\\n• fd => %s', __file.dirname, __file.field,__file.fd);","      __renamer__.push(__file);","      next();","    });","  };","","  return __renamer__;","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"9":1,"17":1,"18":0,"19":0,"21":0,"22":0,"26":0,"28":0,"29":0,"32":0,"33":0,"34":0,"36":0,"37":0,"40":0,"47":0,"50":0,"52":0,"53":0,"54":0,"57":0,"58":0,"59":0,"63":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.serializeFiles.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.serializeFiles.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"serializeFiles","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":43}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":31},"end":{"line":18,"column":52}}},"3":{"name":"UploadedFileMetadata","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":40}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":15,"column":0},"end":{"line":46,"column":2}},"3":{"start":{"line":16,"column":2},"end":{"line":16,"column":18}},"4":{"start":{"line":18,"column":2},"end":{"line":45,"column":9}},"5":{"start":{"line":20,"column":4},"end":{"line":42,"column":8}},"6":{"start":{"line":44,"column":4},"end":{"line":44,"column":16}},"7":{"start":{"line":56,"column":0},"end":{"line":63,"column":1}},"8":{"start":{"line":59,"column":2},"end":{"line":59,"column":79}},"9":{"start":{"line":62,"column":2},"end":{"line":62,"column":27}}},"branchMap":{"1":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":31}},{"start":{"line":32,"column":35},"end":{"line":32,"column":70}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","","","","/**"," * Extract metadata for this Upstream's files."," *"," * @return {Array}"," */","","module.exports = function serializeFiles() {","  var self = this;","","  return _.reduce(self._files, function(memo, file) {","","    memo.push(new UploadedFileMetadata({","      // Unique file descriptor:","      fd: file.stream.fd,","","      // File size.","      // Multiparty will attempt to set this to the value of a part's","      // `content-length` header if such a header exists, but adapters","      // should override this by setting `byteCount` to the size of the","      // persisted file to ensure accuracy.","      size: file.stream.byteCount,","","      // Conventional bodyParser stuff:","      type: file.stream.headers && file.stream.headers['content-type'],","","      // Custom stuff:","      filename: file.stream.filename,","      status: file.status,","      field: self.fieldName,","      extra: file.stream.extra,","","      // Non-enumerable properties:","      stream: file.stream","    }));","","    return memo;","  }, []);","};","","","","","/**"," * Simple wrapper class for making the file metadata nicer."," *"," * @param {Object} metadata"," */","function UploadedFileMetadata(metadata) {","","  // Make `this.orm` non-enumerable","  Object.defineProperty(this, 'stream', { enumerable: false, writable: true });","","  // Merge in metadata","  _.extend(this, metadata);","}","",""],"l":{"5":1,"15":1,"16":0,"18":0,"20":0,"44":0,"56":1,"59":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.writeFile.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.writeFile.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"writeFile","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":51}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":28},"end":{"line":31,"column":39}}},"3":{"name":"(anonymous_3)","line":61,"loc":{"start":{"line":61,"column":13},"end":{"line":61,"column":27}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":29},"end":{"line":65,"column":59}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":42}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":31}},"4":{"start":{"line":10,"column":0},"end":{"line":99,"column":2}},"5":{"start":{"line":12,"column":2},"end":{"line":12,"column":18}},"6":{"start":{"line":15,"column":2},"end":{"line":18,"column":4}},"7":{"start":{"line":23,"column":2},"end":{"line":23,"column":41}},"8":{"start":{"line":27,"column":2},"end":{"line":27,"column":28}},"9":{"start":{"line":31,"column":2},"end":{"line":76,"column":8}},"10":{"start":{"line":59,"column":6},"end":{"line":59,"column":27}},"11":{"start":{"line":61,"column":6},"end":{"line":74,"column":8}},"12":{"start":{"line":63,"column":10},"end":{"line":71,"column":11}},"13":{"start":{"line":64,"column":14},"end":{"line":64,"column":41}},"14":{"start":{"line":65,"column":14},"end":{"line":67,"column":16}},"15":{"start":{"line":66,"column":18},"end":{"line":66,"column":23}},"16":{"start":{"line":68,"column":14},"end":{"line":68,"column":36}},"17":{"start":{"line":69,"column":14},"end":{"line":69,"column":39}},"18":{"start":{"line":70,"column":14},"end":{"line":70,"column":126}},"19":{"start":{"line":73,"column":10},"end":{"line":73,"column":26}},"20":{"start":{"line":82,"column":2},"end":{"line":82,"column":44}},"21":{"start":{"line":96,"column":2},"end":{"line":96,"column":96}}},"branchMap":{"1":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":10},"end":{"line":63,"column":10}},{"start":{"line":63,"column":10},"end":{"line":63,"column":10}}]}},"code":["/**"," * Module dependencies"," */","","var Writable = require('stream').Writable; // (for the leaky pipe)","var async = require('async');","var log = require('../logger');","","","module.exports = function writeFile (__filestream) {","","  var self = this;","","","  var newFile = {","    stream: __filestream,","    status: 'bufferingOrWriting'","  };","","  // Provide `__filestream.field` as alias to `__filestream.name`","  // for consistency within the receiver (final uploaded files","  // metadata objects have a `field` property)","  __filestream.field = __filestream.name;","","  // Track incoming file stream for use in metadata sent back","  // from `.upload()` and also in case we need to cancel it:","  self._files.push(newFile);","","  // Set up error handler for the new __filestream:","  //","  __filestream.on('error', (function() {","","    // If the __filestream is not being consumed (i.e. this Upstream is not","    // `connected` to anything), then we shouldn't allow errors on it to","    // go unhandled (since it would throw, causing the server to crash).","","    // On the other hand, if this Upstream is already hooked up to one or more","    // receivers, we're counting on them to listen for \"READ\" errors on each incoming","    // file stream and handle them accordingly.","    // (i.e. cancel the write and garbage collect the already-written bytes)","","    // So basically, in both cases, we'll sort of just catch the file","    // READ error and... well, do nothing.","    //","    // (keep in mind-- an error event will still be emitted on the actual","    // Upstream itself, but that's happening elsewhere.)","","","    // Pump any remaining chunks from the __filestream into the leaky pipe","    // TODO:","    // I suppose it's possible this step may need to change later, but only","    // if we want receivers to be able to continue to use the __filestreams after","    // an error occurs (I don't see why we would..)","    // Anyways, it's absolutely crucial that this pipe to a `leaky` Writable","    // for everything to work.  Otherwise, responses never get sent.","","    //An error can be emitted on this stream more than once by underlying libraries such as multiparty","    //Mark this event as fired already so we do not pipe the stream twice to the 'leaky' stream.","      var hasFired = false;","","      return function(err) {","          ","          if (!hasFired) {","              var leaky = new Writable();","              leaky._write = function(chunk, encoding, cb) {","                  cb();","              };","              __filestream.unpipe();","              __filestream.pipe(leaky);","              log('Piping the not-yet-written bytes from incoming file `' + __filestream.filename + '` to the memory hole..');","          }","","          hasFired = true;","      };","","  }()));","","","","  // Pump out the new file","  // (Upstream is a Readable stream, remember?)","  var isBackedUp = !self.push(__filestream);","","  // <PERHAPS?>","  // If the push returned false, stop pushing files for a bit","  // (this would involve pausing the flow of incoming part streams","  //  coming from the `on(\"part\")` signals emitted from the MPU request)","  //","  // Easy enough right?","  // -BUT-","  // Here's the challenge- the incoming MPU form closing will cause Skipper","  // to stop listening for new files.  So we must always push __filestreams as soon","  // as they arrive.  Not sure if changing this is even preferable...","  // </PERHAPS?>","","  log.color('grey').write('Upstream: Pumping incoming file through field `%s`', self.fieldName);","","","};",""],"l":{"5":1,"6":1,"7":1,"10":1,"12":0,"15":0,"23":0,"27":0,"31":0,"59":0,"61":0,"63":0,"64":0,"65":0,"66":0,"68":0,"69":0,"70":0,"73":0,"82":0,"96":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.fatalIncomingError.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.fatalIncomingError.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"fatalIncomingError","line":29,"loc":{"start":{"line":29,"column":17},"end":{"line":29,"column":51}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":22},"end":{"line":55,"column":37}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":31}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"5":{"start":{"line":29,"column":0},"end":{"line":104,"column":2}},"6":{"start":{"line":33,"column":2},"end":{"line":33,"column":134}},"7":{"start":{"line":34,"column":2},"end":{"line":34,"column":57}},"8":{"start":{"line":35,"column":2},"end":{"line":35,"column":40}},"9":{"start":{"line":36,"column":2},"end":{"line":36,"column":16}},"10":{"start":{"line":37,"column":2},"end":{"line":37,"column":68}},"11":{"start":{"line":38,"column":2},"end":{"line":38,"column":40}},"12":{"start":{"line":54,"column":2},"end":{"line":54,"column":18}},"13":{"start":{"line":55,"column":2},"end":{"line":86,"column":5}},"14":{"start":{"line":61,"column":4},"end":{"line":64,"column":5}},"15":{"start":{"line":62,"column":6},"end":{"line":62,"column":143}},"16":{"start":{"line":63,"column":6},"end":{"line":63,"column":13}},"17":{"start":{"line":67,"column":4},"end":{"line":70,"column":5}},"18":{"start":{"line":68,"column":6},"end":{"line":68,"column":142}},"19":{"start":{"line":69,"column":6},"end":{"line":69,"column":13}},"20":{"start":{"line":73,"column":4},"end":{"line":73,"column":30}},"21":{"start":{"line":76,"column":4},"end":{"line":80,"column":5}},"22":{"start":{"line":77,"column":6},"end":{"line":77,"column":170}},"23":{"start":{"line":79,"column":6},"end":{"line":79,"column":157}},"24":{"start":{"line":84,"column":4},"end":{"line":84,"column":35}},"25":{"start":{"line":89,"column":2},"end":{"line":89,"column":21}},"26":{"start":{"line":98,"column":2},"end":{"line":98,"column":26}},"27":{"start":{"line":102,"column":2},"end":{"line":102,"column":30}}},"branchMap":{"1":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":25},"end":{"line":34,"column":37}},{"start":{"line":34,"column":41},"end":{"line":34,"column":55}}]},"2":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"3":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"4":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":4},"end":{"line":76,"column":4}},{"start":{"line":76,"column":4},"end":{"line":76,"column":4}}]}},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var util = require('util');","var log = require('../logger');","var debug = require('debug')('skipper');","","","/**"," * Called by parser implementation to signal an INCOMING fatal error"," * with one or more files being pumped by this Upstream."," * This means that something went wrong or cancelled the entire file upload on the"," * \"source\" side (i.e. the request), and that we should invalidate the entire"," * upload.  An example of this scenario is if a user aborts the request."," *"," * ------------------------------------------------------------------------"," * TODO:"," * Probably can deprecate this, since you almost always want to retain the"," * files that were already uploaded in this case."," * ------------------------------------------------------------------------"," *"," * All future files on this Upstream are cancelled (stop listening to file parts)"," * and any currently-uploading files are invalidated."," *"," * @param  {Error} err"," */","module.exports = function fatalIncomingError (err) {","","  // Log message indicating that we are now aborting/cancelling all","  // future, current, and previously uploaded files from this Upstream.","  log.color('red').write('Fatal incoming error in Upstream `%s` ::   (source or user may have cancelled the request)',this.fieldName);","  log.color('red').write(err.toString && err.toString());","  log.color('red').write('-----------');","  log(err.code);","  log('%s - %s', util.inspect(err.message), util.inspect(err.name));","  log.color('red').write('-----------');","","  // Emit an error event to any of file streams in this Upstream","  // which are still being consumed.","  //","  // Any `receiver__`s reading this Upstream are responsible for listening to","  // 'error' events on the incoming file readstream(s).  On receipt of such a","  // \"READ\" error, they should cancel the upload and garbage-collect any bytes","  // which were already written to the destination writestream(s).","  //","  // Receivers should, of course, ALSO listen for \"WRITE\" errors ('error' events on","  // the outgoing writestream for each file).  The behavior is probably pretty much","  // the same in both cases, although a receiver might, for instance, choose to retry using","  // exponential back-off in the case of a \"WRITE\" error.  But on receiving a \"READ\" error,","  // it should always immediately stop.  This is because such an error is usually more","  // serious, and might even be an indication of the user trying to cancel a file upload.","  var self = this;","  _.each(this._files, function(file) {","","    // If the file has already been cancelled, return rather than emitting another error on the stream.","    // This is because depending on the adapter, an error on the stream may result in fatalIncomingError","    // being called again, and the receiver is only equipped to handle one fatal error (i.e. it uses","    // .once(), which makes sense since the error is supposed to be _fatal_, after all).","    if (file.status === 'cancelled') {","      debug('Swallowing fatal upstream error for already-cancelled incoming file `%s` of upstream `%s`', file.stream.filename, self.fieldName);","      return;","    }","","    // If the file is finished, ignore the error.","    if (file.status === 'finished') {","      debug('Swallowing fatal upstream error for already-finished incoming file `%s` of upstream `%s`', file.stream.filename, self.fieldName);","      return;","    }","","    // Mark the file as cancelled","    file.status = 'cancelled';","","    // Output a debug message indicating that an error occurred on the incoming file.","    if (!self._connected){","      debug('Forwarding fatal upstream error for unconnected (i.e. not connected to receiver) incoming file `%s` of upstream `%s`', file.stream.filename, self.fieldName);","    } else {","      debug('Forwarding fatal upstream error for already-connected (to receiver) incoming file `%s` of upstream `%s`', file.stream.filename, self.fieldName);","    }","","    // Forward the fatal upstream error to the actual file stream so that it can re-route to the leaky pipe.","    // Otherwise, the stream may never close, causing the response to hang.","    file.stream.emit('error', err);","","  });","","  // Indicate the end of the Upstream (no more files coming)","  this.noMoreFiles();","","","  // Finally, emit error on this Upstream itself to cause some real trouble.","  // If this Upstream is connected to something, this will trigger the error handler","  // on the receiving writestream, which might contain special behavior.","  // Otherwise, the error will be handled by the Parser, which will send a warning","  // back up to the request, or even potentially call `next(err)`, if the parser middleware","  // hasn't handed over control to the app yet.","  this.emit('error', err);","","  // Track errors on this upstream in case its NOT connected to a receiver.","  // This allows us to intercept attemps to .upload() to it.","  this._fatalErrors.push(err);","","};",""],"l":{"5":1,"6":1,"7":1,"8":1,"29":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"54":0,"55":0,"61":0,"62":0,"63":0,"67":0,"68":0,"69":0,"73":0,"76":0,"77":0,"79":0,"84":0,"89":0,"98":0,"102":0}},"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.noMoreFiles.js":{"path":"/home/travis/build/npmtest/node-npmtest-skipper/node_modules/skipper/standalone/Upstream/prototype.noMoreFiles.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"noMoreFiles","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":41}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":24},"end":{"line":26,"column":45}}}},"statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":26}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":40}},"4":{"start":{"line":20,"column":0},"end":{"line":29,"column":2}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":105}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":18}},"7":{"start":{"line":26,"column":2},"end":{"line":28,"column":5}},"8":{"start":{"line":27,"column":4},"end":{"line":27,"column":24}}},"branchMap":{},"code":["/**"," * Module dependencies"," */","","var _ = require('lodash');","var log = require('../logger');","var debug = require('debug')('skipper');","","","","/**"," * Called by parser implementation to signal the end of the Upstream."," * (i.e. no more files are coming)"," *"," * Anyone trying to `read()` Upstream will no longer be able to get"," * any files from it."," *"," */","","module.exports = function noMoreFiles () {","  // log.color('grey').write('Upstream: No more files will be sent through field `%s`', this.fieldName);","  debug('Upstream: No more files will be sent through field `%s`- clearing timeouts...', this.fieldName);","  this.push(null);","","  // Clear all timeouts","  _.each(this.timeouts, function(timer, key) {","    clearTimeout(timer);","  });","};",""],"l":{"5":1,"6":1,"7":1,"20":1,"22":0,"23":0,"26":0,"27":0}}}